{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nexport const transformUserData = userData => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  };\n};\nexport const transformPool = pool => {\n  const {\n    totalStaked,\n    stakingLimit,\n    userData,\n    ...rest\n  } = pool;\n  return { ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit)\n  };\n};","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/state/pools/helpers.ts"],"names":["BigNumber","BIG_ZERO","transformUserData","userData","allowance","stakingTokenBalance","stakedBalance","pendingReward","transformPool","pool","totalStaked","stakingLimit","rest"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AAWA,OAAO,MAAMC,iBAAiB,GAAIC,QAAD,IAAwB;AACvD,SAAO;AACLC,IAAAA,SAAS,EAAED,QAAQ,GAAG,IAAIH,SAAJ,CAAcG,QAAQ,CAACC,SAAvB,CAAH,GAAuCH,QADrD;AAELI,IAAAA,mBAAmB,EAAEF,QAAQ,GAAG,IAAIH,SAAJ,CAAcG,QAAQ,CAACE,mBAAvB,CAAH,GAAiDJ,QAFzE;AAGLK,IAAAA,aAAa,EAAEH,QAAQ,GAAG,IAAIH,SAAJ,CAAcG,QAAQ,CAACG,aAAvB,CAAH,GAA2CL,QAH7D;AAILM,IAAAA,aAAa,EAAEJ,QAAQ,GAAG,IAAIH,SAAJ,CAAcG,QAAQ,CAACI,aAAvB,CAAH,GAA2CN;AAJ7D,GAAP;AAMD,CAPM;AASP,OAAO,MAAMO,aAAa,GAAIC,IAAD,IAAsB;AACjD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,YAAf;AAA6BR,IAAAA,QAA7B;AAAuC,OAAGS;AAA1C,MAAmDH,IAAzD;AAEA,SAAO,EACL,GAAGG,IADE;AAELT,IAAAA,QAAQ,EAAED,iBAAiB,CAACC,QAAD,CAFtB;AAGLO,IAAAA,WAAW,EAAE,IAAIV,SAAJ,CAAcU,WAAd,CAHR;AAILC,IAAAA,YAAY,EAAE,IAAIX,SAAJ,CAAcW,YAAd;AAJT,GAAP;AAMD,CATM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\ntype UserData =\n  | Pool['userData']\n  | {\n      allowance: number | string\n      stakingTokenBalance: number | string\n      stakedBalance: number | string\n      pendingReward: number | string\n    }\n\nexport const transformUserData = (userData: UserData) => {\n  return {\n    allowance: userData ? new BigNumber(userData.allowance) : BIG_ZERO,\n    stakingTokenBalance: userData ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO,\n    stakedBalance: userData ? new BigNumber(userData.stakedBalance) : BIG_ZERO,\n    pendingReward: userData ? new BigNumber(userData.pendingReward) : BIG_ZERO,\n  }\n}\n\nexport const transformPool = (pool: Pool): Pool => {\n  const { totalStaked, stakingLimit, userData, ...rest } = pool\n\n  return {\n    ...rest,\n    userData: transformUserData(userData),\n    totalStaked: new BigNumber(totalStaked),\n    stakingLimit: new BigNumber(stakingLimit),\n  } as Pool\n}\n"]},"metadata":{},"sourceType":"module"}