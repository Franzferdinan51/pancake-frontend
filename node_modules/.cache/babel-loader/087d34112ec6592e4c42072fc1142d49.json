{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { convertSharesToCake } from 'views/Pools/helpers';\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecentCakeProfitCountdownRow = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pricePerFullShare,\n    userData: {\n      cakeAtLastUserAction,\n      userShares,\n      lastUserActionTime\n    }\n  } = useCakeVault();\n  const shouldDisplayCakeProfit = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0);\n  const currentSharesAsCake = convertSharesToCake(userShares, pricePerFullShare);\n  const cakeProfit = currentSharesAsCake.cakeAsBigNumber.minus(cakeAtLastUserAction);\n  const cakeToDisplay = cakeProfit.gte(0) ? getBalanceNumber(cakeProfit, 18) : 0;\n  const cakePriceBusd = usePriceCakeBusd();\n  const dollarValueOfCake = cakeProfit.times(cakePriceBusd);\n  const dollarValueToDisplay = dollarValueOfCake.gte(0) ? getBalanceNumber(dollarValueOfCake, 18) : 0;\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000;\n  const dateTimeLastAction = new Date(lastActionInMs);\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString();\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"14px\",\n      children: t('Recent CAKE profit:')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), shouldDisplayCakeProfit && /*#__PURE__*/_jsxDEV(RecentCakeProfitBalance, {\n      cakeToDisplay: cakeToDisplay,\n      dollarValueToDisplay: dollarValueToDisplay,\n      dateStringToDisplay: dateStringToDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecentCakeProfitCountdownRow, \"3Isa7LxbCrrm5uLWsmFymk09wyo=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault, usePriceCakeBusd];\n});\n\n_c = RecentCakeProfitCountdownRow;\nexport default RecentCakeProfitCountdownRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecentCakeProfitCountdownRow\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx"],"names":["React","Flex","Text","useWeb3React","useTranslation","useCakeVault","usePriceCakeBusd","getBalanceNumber","convertSharesToCake","RecentCakeProfitBalance","RecentCakeProfitCountdownRow","t","account","pricePerFullShare","userData","cakeAtLastUserAction","userShares","lastUserActionTime","shouldDisplayCakeProfit","gt","currentSharesAsCake","cakeProfit","cakeAsBigNumber","minus","cakeToDisplay","gte","cakePriceBusd","dollarValueOfCake","times","dollarValueToDisplay","lastActionInMs","parseInt","dateTimeLastAction","Date","dateStringToDisplay","toLocaleString"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,aAA/C;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,OAAOC,uBAAP,MAAoC,2BAApC;;;AAEA,MAAMC,4BAA4B,GAAG,MAAM;AAAA;;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAQP,cAAc,EAA5B;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcT,YAAY,EAAhC;AACA,QAAM;AACJU,IAAAA,iBADI;AAEJC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,oBAAF;AAAwBC,MAAAA,UAAxB;AAAoCC,MAAAA;AAApC;AAFN,MAGFZ,YAAY,EAHhB;AAIA,QAAMa,uBAAuB,GAC3BN,OAAO,IAAIG,oBAAX,IAAmCA,oBAAoB,CAACI,EAArB,CAAwB,CAAxB,CAAnC,IAAiEH,UAAjE,IAA+EA,UAAU,CAACG,EAAX,CAAc,CAAd,CADjF;AAEA,QAAMC,mBAAmB,GAAGZ,mBAAmB,CAACQ,UAAD,EAAaH,iBAAb,CAA/C;AACA,QAAMQ,UAAU,GAAGD,mBAAmB,CAACE,eAApB,CAAoCC,KAApC,CAA0CR,oBAA1C,CAAnB;AACA,QAAMS,aAAa,GAAGH,UAAU,CAACI,GAAX,CAAe,CAAf,IAAoBlB,gBAAgB,CAACc,UAAD,EAAa,EAAb,CAApC,GAAuD,CAA7E;AACA,QAAMK,aAAa,GAAGpB,gBAAgB,EAAtC;AACA,QAAMqB,iBAAiB,GAAGN,UAAU,CAACO,KAAX,CAAiBF,aAAjB,CAA1B;AACA,QAAMG,oBAAoB,GAAGF,iBAAiB,CAACF,GAAlB,CAAsB,CAAtB,IAA2BlB,gBAAgB,CAACoB,iBAAD,EAAoB,EAApB,CAA3C,GAAqE,CAAlG;AAEA,QAAMG,cAAc,GAAGb,kBAAkB,IAAIc,QAAQ,CAACd,kBAAD,CAAR,GAA+B,IAA5E;AACA,QAAMe,kBAAkB,GAAG,IAAIC,IAAJ,CAASH,cAAT,CAA3B;AACA,QAAMI,mBAAmB,GAAGF,kBAAkB,CAACG,cAAnB,EAA5B;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,cAAc,EAAC,eAAzC;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAC,MAAf;AAAA,gBAAuBxB,CAAC,CAAC,qBAAD;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGO,uBAAuB,iBACtB,QAAC,uBAAD;AACE,MAAA,aAAa,EAAEM,aADjB;AAEE,MAAA,oBAAoB,EAAEK,oBAFxB;AAGE,MAAA,mBAAmB,EAAEK;AAHvB;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhCD;;GAAMxB,4B;UACUN,c,EACMD,Y,EAIhBE,Y,EAMkBC,gB;;;KAZlBI,4B;AAkCN,eAAeA,4BAAf","sourcesContent":["import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const shouldDisplayCakeProfit =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const currentSharesAsCake = convertSharesToCake(userShares, pricePerFullShare)\n  const cakeProfit = currentSharesAsCake.cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const cakeToDisplay = cakeProfit.gte(0) ? getBalanceNumber(cakeProfit, 18) : 0\n  const cakePriceBusd = usePriceCakeBusd()\n  const dollarValueOfCake = cakeProfit.times(cakePriceBusd)\n  const dollarValueToDisplay = dollarValueOfCake.gte(0) ? getBalanceNumber(dollarValueOfCake, 18) : 0\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{t('Recent CAKE profit:')}</Text>\n      {shouldDisplayCakeProfit && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={cakeToDisplay}\n          dollarValueToDisplay={dollarValueToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n"]},"metadata":{},"sourceType":"module"}