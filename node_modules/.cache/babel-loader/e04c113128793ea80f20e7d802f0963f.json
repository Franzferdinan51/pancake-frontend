{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Collectibles/components/NftCard/BunnySpecialCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useBunnySpecialContract } from 'hooks/useContract';\nimport NftCard from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BunnySpecialCard = ({\n  nft,\n  ...props\n}) => {\n  _s();\n\n  const [isClaimable, setIsClaimable] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const bunnySpecialContract = useBunnySpecialContract();\n  const {\n    variationId\n  } = nft;\n\n  const handleClaim = () => {\n    return bunnySpecialContract.methods.mintNFT(variationId).send({\n      from: account\n    });\n  };\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, variationId).call();\n      setIsClaimable(canClaimSingle);\n    };\n\n    if (account) {\n      fetchClaimStatus();\n    }\n  }, [account, variationId, bunnySpecialContract, setIsClaimable]);\n  return /*#__PURE__*/_jsxDEV(NftCard, {\n    nft: nft,\n    ...props,\n    canClaim: isClaimable,\n    onClaim: handleClaim\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n_s(BunnySpecialCard, \"aidtLg2c4wiaASXuQKGbSN4I2VM=\", false, function () {\n  return [useWeb3React, useBunnySpecialContract];\n});\n\n_c = BunnySpecialCard;\nexport default BunnySpecialCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BunnySpecialCard\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Collectibles/components/NftCard/BunnySpecialCard.tsx"],"names":["React","useEffect","useState","useWeb3React","useBunnySpecialContract","NftCard","BunnySpecialCard","nft","props","isClaimable","setIsClaimable","account","bunnySpecialContract","variationId","handleClaim","methods","mintNFT","send","from","fetchClaimStatus","canClaimSingle","call"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAASC,uBAAT,QAAwC,mBAAxC;AACA,OAAOC,OAAP,MAAsC,SAAtC;;;AAEA,MAAMC,gBAAwC,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAO,KAAGC;AAAV,CAAD,KAAuB;AAAA;;AACtE,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAES,IAAAA;AAAF,MAAcR,YAAY,EAAhC;AACA,QAAMS,oBAAoB,GAAGR,uBAAuB,EAApD;AACA,QAAM;AAAES,IAAAA;AAAF,MAAkBN,GAAxB;;AAEA,QAAMO,WAAW,GAAG,MAA4B;AAC9C,WAAOF,oBAAoB,CAACG,OAArB,CAA6BC,OAA7B,CAAqCH,WAArC,EAAkDI,IAAlD,CAAuD;AAAEC,MAAAA,IAAI,EAAEP;AAAR,KAAvD,CAAP;AACD,GAFD;;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,gBAAgB,GAAG,YAAY;AACnC,YAAMC,cAAc,GAAG,MAAMR,oBAAoB,CAACG,OAArB,CAA6BK,cAA7B,CAA4CT,OAA5C,EAAqDE,WAArD,EAAkEQ,IAAlE,EAA7B;AACAX,MAAAA,cAAc,CAACU,cAAD,CAAd;AACD,KAHD;;AAKA,QAAIT,OAAJ,EAAa;AACXQ,MAAAA,gBAAgB;AACjB;AACF,GATQ,EASN,CAACR,OAAD,EAAUE,WAAV,EAAuBD,oBAAvB,EAA6CF,cAA7C,CATM,CAAT;AAWA,sBAAO,QAAC,OAAD;AAAS,IAAA,GAAG,EAAEH,GAAd;AAAA,OAAuBC,KAAvB;AAA8B,IAAA,QAAQ,EAAEC,WAAxC;AAAqD,IAAA,OAAO,EAAEK;AAA9D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAtBD;;GAAMR,gB;UAEgBH,Y,EACSC,uB;;;KAHzBE,gB;AAwBN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpecialCard: React.FC<NftCardProps> = ({ nft, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialContract = useBunnySpecialContract()\n  const { variationId } = nft\n\n  const handleClaim = (): PromiEvent<Contract> => {\n    return bunnySpecialContract.methods.mintNFT(variationId).send({ from: account })\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, variationId).call()\n      setIsClaimable(canClaimSingle)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, variationId, bunnySpecialContract, setIsClaimable])\n\n  return <NftCard nft={nft} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpecialCard\n"]},"metadata":{},"sourceType":"module"}