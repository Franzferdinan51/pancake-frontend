{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit';\nimport { useSousApprove } from 'hooks/useApprove';\nimport { useTranslation } from 'contexts/Localization';\nimport { useERC20 } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport { getAddress } from 'utils/addressHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ApprovalAction = ({\n  pool,\n  isLoading = false\n}) => {\n  _s();\n\n  const {\n    sousId,\n    stakingToken,\n    earningToken\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '');\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    onApprove\n  } = useSousApprove(stakingTokenContract, sousId);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const txHash = await onApprove();\n\n      if (txHash) {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the ${earningToken.symbol} pool!`)}`);\n        setRequestedApproval(false);\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(`${t('Error')}`, `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`);\n        setRequestedApproval(false);\n      }\n    } catch (e) {\n      console.error(e);\n      toastError('Error', e === null || e === void 0 ? void 0 : e.message);\n    }\n  }, [onApprove, setRequestedApproval, toastSuccess, toastError, t, earningToken]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: \"52px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: requestedApproval,\n      endIcon: requestedApproval ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 40\n      }, this) : null,\n      disabled: requestedApproval,\n      onClick: handleApprove,\n      width: \"100%\",\n      children: t('Enable')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(ApprovalAction, \"zOmVvKAq9Y2LE9JeYk1uYeHD0eo=\", false, function () {\n  return [useTranslation, useERC20, useSousApprove, useToast];\n});\n\n_c = ApprovalAction;\nexport default ApprovalAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApprovalAction\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/CardActions/ApprovalAction.tsx"],"names":["React","useState","useCallback","Button","AutoRenewIcon","Skeleton","useSousApprove","useTranslation","useERC20","useToast","getAddress","ApprovalAction","pool","isLoading","sousId","stakingToken","earningToken","t","stakingTokenContract","address","requestedApproval","setRequestedApproval","onApprove","toastSuccess","toastError","handleApprove","txHash","symbol","e","console","error","message"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useSousApprove } from 'hooks/useApprove'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { getAddress } from 'utils/addressHelpers'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false }) => {\n  const { sousId, stakingToken, earningToken } = pool\n  const { t } = useTranslation()\n  const stakingTokenContract = useERC20(stakingToken.address ? getAddress(stakingToken.address) : '')\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useSousApprove(stakingTokenContract, sousId)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (txHash) {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the ${earningToken.symbol} pool!`)}`)\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError('Error', e?.message)\n    }\n  }, [onApprove, setRequestedApproval, toastSuccess, toastError, t, earningToken])\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n"]},"metadata":{},"sourceType":"module"}