{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/components/RoundCard/SetPositionCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ArrowBackIcon, CardBody, CardHeader, Flex, Heading, IconButton, Button, BinanceIcon, Text, BalanceInput, Slider, Box, AutoRenewIcon } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { useWeb3React } from '@web3-react/core';\nimport { useGetMinBetAmount } from 'state/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport { useGetBnbBalance } from 'hooks/useTokenBalance';\nimport useToast from 'hooks/useToast';\nimport { BetPosition } from 'state/types';\nimport { getDecimalAmount } from 'utils/formatBalance';\nimport UnlockButton from 'components/UnlockButton';\nimport PositionTag from '../PositionTag';\nimport { getBnbAmount } from '../../helpers';\nimport useSwiper from '../../hooks/useSwiper';\nimport FlexRow from '../FlexRow';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL);\nconst percentShortcuts = [10, 25, 50, 75];\n\nconst getPercentDisplay = percentage => {\n  if (Number.isNaN(percentage)) {\n    return '';\n  }\n\n  if (percentage > 100) {\n    return '';\n  }\n\n  if (percentage < 0) {\n    return '';\n  }\n\n  return `${percentage.toLocaleString(undefined, {\n    maximumFractionDigits: 1\n  })}%`;\n};\n\nconst getButtonProps = (value, bnbBalance, minBetAmountBalance) => {\n  if (bnbBalance.eq(0)) {\n    return {\n      id: 999,\n      fallback: 'Insufficient BNB balance',\n      disabled: true\n    };\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return {\n      id: 999,\n      fallback: 'Enter an amount',\n      disabled: true\n    };\n  }\n\n  return {\n    id: 464,\n    fallback: 'Confirm',\n    disabled: value.lt(minBetAmountBalance)\n  };\n};\n\nconst SetPositionCard = ({\n  position,\n  togglePosition,\n  onBack,\n  onSuccess\n}) => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const [isTxPending, setIsTxPending] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    swiper\n  } = useSwiper();\n  const {\n    balance: bnbBalance\n  } = useGetBnbBalance();\n  const minBetAmount = useGetMinBetAmount();\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastError\n  } = useToast();\n  const predictionsContract = usePredictionsContract();\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber();\n  const maxBalance = getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance).toNumber();\n  const valueAsBn = new BigNumber(value);\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber();\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance);\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null;\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber();\n\n  const handleChange = input => {\n    setValue(input);\n  };\n\n  const handleSliderChange = newValue => {\n    setValue(newValue.toString());\n  };\n\n  const setMax = () => {\n    setValue(maxBalance.toString());\n  }; // Clear value\n\n\n  const handleGoBack = () => {\n    setValue('');\n    onBack();\n  }; // Disable the swiper events to avoid conflicts\n\n\n  const handleMouseOver = () => {\n    swiper.keyboard.disable();\n    swiper.mousewheel.disable();\n    swiper.detachEvents();\n  };\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable();\n    swiper.mousewheel.enable();\n    swiper.attachEvents();\n  };\n\n  const {\n    fallback,\n    disabled\n  } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance);\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear';\n    const decimalValue = getDecimalAmount(valueAsBn);\n    predictionsContract.methods[betMethod]().send({\n      from: account,\n      value: decimalValue\n    }).once('sending', () => {\n      setIsTxPending(true);\n    }).once('receipt', async result => {\n      setIsTxPending(false);\n      onSuccess(decimalValue, result.transactionHash);\n    }).once('error', error => {\n      const errorMsg = t('An error occurred, unable to enter your position');\n      toastError('Error!', error === null || error === void 0 ? void 0 : error.message);\n      setIsTxPending(false);\n      console.error(errorMsg, error);\n    });\n  }; // Warnings\n\n\n  useEffect(() => {\n    const bnValue = new BigNumber(value);\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance);\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({\n        id: 999,\n        fallback: 'Insufficient BNB balance'\n      });\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        fallback: 'A minimum amount of %num% %token% is required',\n        data: {\n          num: minBetAmountBalance,\n          token: 'BNB'\n        }\n      });\n    } else {\n      setErrorMessage(null);\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      p: \"16px\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          scale: \"sm\",\n          onClick: handleGoBack,\n          mr: \"8px\",\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n            width: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            children: t('Set Position')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PositionTag, {\n          betPosition: position,\n          onClick: togglePosition,\n          children: position === BetPosition.BULL ? t('Up') : t('Down')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      py: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"right\",\n          color: \"textSubtle\",\n          children: [t('Commit'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(BinanceIcon, {\n            mr: \"4px  \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            textTransform: \"uppercase\",\n            children: \"BNB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n        value: value,\n        onUserInput: handleChange,\n        isWarning: showFieldWarning,\n        inputProps: {\n          disabled: !account || isTxPending\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), showFieldWarning && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        fontSize: \"12px\",\n        mt: \"4px\",\n        textAlign: \"right\",\n        children: t(errorMessage.fallback, errorMessage.data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textAlign: \"right\",\n        mb: \"16px\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        style: {\n          height: '18px'\n        },\n        children: account && t(`Balance: ${balanceDisplay}`, {\n          num: balanceDisplay\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        name: \"balance\",\n        min: 0,\n        max: maxBalance,\n        value: valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0,\n        onValueChanged: handleSliderChange,\n        step: 0.000000000000001,\n        valueLabel: account ? percentageDisplay : '',\n        disabled: !account || isTxPending,\n        mb: \"4px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: [percentShortcuts.map(percent => {\n          const handleClick = () => {\n            setValue((percent / 100 * maxBalance).toString());\n          };\n\n          return /*#__PURE__*/_jsxDEV(Button, {\n            scale: \"xs\",\n            variant: \"tertiary\",\n            onClick: handleClick,\n            disabled: !account || isTxPending,\n            style: {\n              flex: 1\n            },\n            children: `${percent}%`\n          }, percent, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          scale: \"xs\",\n          variant: \"tertiary\",\n          onClick: setMax,\n          disabled: !account || isTxPending,\n          children: t('Max')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: \"8px\",\n        children: account ? /*#__PURE__*/_jsxDEV(Button, {\n          width: \"100%\",\n          disabled: !account || disabled,\n          onClick: handleEnterPosition,\n          isLoading: isTxPending,\n          endIcon: isTxPending ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n            color: \"currentColor\",\n            spin: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 38\n          }, this) : null,\n          children: t(fallback)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(UnlockButton, {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        fontSize: \"12px\",\n        lineHeight: 1,\n        color: \"textSubtle\",\n        children: t(\"You won't be able to remove or change your position once you enter it.\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetPositionCard, \"0AQodl2hxoAbbMAmHMVKs8NuxY0=\", false, function () {\n  return [useWeb3React, useSwiper, useGetBnbBalance, useGetMinBetAmount, useTranslation, useToast, usePredictionsContract];\n});\n\n_c = SetPositionCard;\nexport default SetPositionCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetPositionCard\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/components/RoundCard/SetPositionCard.tsx"],"names":["React","useEffect","useState","ArrowBackIcon","CardBody","CardHeader","Flex","Heading","IconButton","Button","BinanceIcon","Text","BalanceInput","Slider","Box","AutoRenewIcon","BigNumber","DEFAULT_TOKEN_DECIMAL","useWeb3React","useGetMinBetAmount","useTranslation","usePredictionsContract","useGetBnbBalance","useToast","BetPosition","getDecimalAmount","UnlockButton","PositionTag","getBnbAmount","useSwiper","FlexRow","Card","dust","times","percentShortcuts","getPercentDisplay","percentage","Number","isNaN","toLocaleString","undefined","maximumFractionDigits","getButtonProps","value","bnbBalance","minBetAmountBalance","eq","id","fallback","disabled","lt","SetPositionCard","position","togglePosition","onBack","onSuccess","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","account","swiper","balance","minBetAmount","t","toastError","predictionsContract","balanceDisplay","toNumber","maxBalance","gt","minus","valueAsBn","percentageOfMaxBalance","div","percentageDisplay","showFieldWarning","handleChange","input","handleSliderChange","newValue","toString","setMax","handleGoBack","handleMouseOver","keyboard","disable","mousewheel","detachEvents","handleMouseOut","enable","attachEvents","handleEnterPosition","betMethod","BULL","decimalValue","methods","send","from","once","result","transactionHash","error","errorMsg","message","console","bnValue","hasSufficientBalance","lte","data","num","token","height","map","percent","handleClick","flex"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getPercentDisplay = (percentage: number) => {\n  if (Number.isNaN(percentage)) {\n    return ''\n  }\n\n  if (percentage > 100) {\n    return ''\n  }\n\n  if (percentage < 0) {\n    return ''\n  }\n\n  return `${percentage.toLocaleString(undefined, { maximumFractionDigits: 1 })}%`\n}\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: number) => {\n  if (bnbBalance.eq(0)) {\n    return { id: 999, fallback: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { id: 999, fallback: 'Enter an amount', disabled: true }\n  }\n  return { id: 464, fallback: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = getBnbAmount(bnbBalance).toNumber()\n  const maxBalance = getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance).toNumber()\n  const valueAsBn = new BigNumber(value)\n\n  const percentageOfMaxBalance = valueAsBn.div(maxBalance).times(100).toNumber()\n  const percentageDisplay = getPercentDisplay(percentageOfMaxBalance)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n  const minBetAmountBalance = getBnbAmount(minBetAmount).toNumber()\n\n  const handleChange = (input) => {\n    setValue(input)\n  }\n\n  const handleSliderChange = (newValue: number) => {\n    setValue(newValue.toString())\n  }\n\n  const setMax = () => {\n    setValue(maxBalance.toString())\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { fallback, disabled } = getButtonProps(valueAsBn, bnbBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError('Error!', error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ id: 999, fallback: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        fallback: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.fallback, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t(`Balance: ${balanceDisplay}`, { num: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={maxBalance}\n          value={valueAsBn.lte(maxBalance) ? valueAsBn.toNumber() : 0}\n          onValueChanged={handleSliderChange}\n          step={0.000000000000001}\n          valueLabel={account ? percentageDisplay : ''}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percent) => {\n            const handleClick = () => {\n              setValue(((percent / 100) * maxBalance).toString())\n            }\n\n            return (\n              <Button\n                key={percent}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percent}%`}\n              </Button>\n            )\n          })}\n          <Button scale=\"xs\" variant=\"tertiary\" onClick={setMax} disabled={!account || isTxPending}>\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(fallback)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t(\"You won't be able to remove or change your position once you enter it.\")}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n"]},"metadata":{},"sourceType":"module"}