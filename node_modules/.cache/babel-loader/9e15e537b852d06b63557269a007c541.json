{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Farms/components/FarmCard/HarvestAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Heading } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useHarvest } from 'hooks/useHarvest';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useWeb3React } from '@web3-react/core';\nimport { usePriceCakeBusd } from 'state/hooks';\nimport CardBusdValue from '../../../Home/components/CardBusdValue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HarvestAction = ({\n  earnings,\n  pid\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvest(pid);\n  const cakePrice = usePriceCakeBusd();\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0;\n  const displayBalance = rawEarningsBalance.toLocaleString();\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0;\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    mb: \"8px\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      color: rawEarningsBalance === 0 ? 'textDisabled' : 'text',\n      children: [displayBalance, earningsBusd > 0 && /*#__PURE__*/_jsxDEV(CardBusdValue, {\n        value: earningsBusd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: rawEarningsBalance === 0 || pendingTx,\n      onClick: async () => {\n        setPendingTx(true);\n        await onReward();\n        setPendingTx(false);\n      },\n      children: t('Harvest')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestAction, \"XCOh4B0CtcH7oEBIUeQREmowBEY=\", false, function () {\n  return [useWeb3React, useTranslation, useHarvest, usePriceCakeBusd];\n});\n\n_c = HarvestAction;\nexport default HarvestAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Farms/components/FarmCard/HarvestAction.tsx"],"names":["React","useState","BigNumber","Button","Flex","Heading","useTranslation","useHarvest","getBalanceNumber","useWeb3React","usePriceCakeBusd","CardBusdValue","HarvestAction","earnings","pid","account","t","pendingTx","setPendingTx","onReward","cakePrice","rawEarningsBalance","displayBalance","toLocaleString","earningsBusd","multipliedBy","toNumber"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAsC,oBAAtC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAOC,aAAP,MAA0B,wCAA1B;;;AAOA,MAAMC,aAA6C,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAuB;AAAA;;AAC3E,QAAM;AAAEC,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAQV,cAAc,EAA5B;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAeZ,UAAU,CAACO,GAAD,CAA/B;AACA,QAAMM,SAAS,GAAGV,gBAAgB,EAAlC;AAEA,QAAMW,kBAAkB,GAAGN,OAAO,GAAGP,gBAAgB,CAACK,QAAD,CAAnB,GAAgC,CAAlE;AACA,QAAMS,cAAc,GAAGD,kBAAkB,CAACE,cAAnB,EAAvB;AACA,QAAMC,YAAY,GAAGH,kBAAkB,GAAG,IAAInB,SAAJ,CAAcmB,kBAAd,EAAkCI,YAAlC,CAA+CL,SAA/C,EAA0DM,QAA1D,EAAH,GAA0E,CAAjH;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,EAAE,EAAC,KAAT;AAAe,IAAA,cAAc,EAAC,eAA9B;AAA8C,IAAA,UAAU,EAAC,QAAzD;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEL,kBAAkB,KAAK,CAAvB,GAA2B,cAA3B,GAA4C,MAA5D;AAAA,iBACGC,cADH,EAEGE,YAAY,GAAG,CAAf,iBAAoB,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,cAFvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAEH,kBAAkB,KAAK,CAAvB,IAA4BJ,SADxC;AAEE,MAAA,OAAO,EAAE,YAAY;AACnBC,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,cAAMC,QAAQ,EAAd;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OANH;AAAA,gBAQGF,CAAC,CAAC,SAAD;AARJ;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA7BD;;GAAMJ,a;UACgBH,Y,EACNH,c,EAEOC,U,EACHG,gB;;;KALdE,a;AA+BN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const cakePrice = usePriceCakeBusd()\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n  const earningsBusd = rawEarningsBalance ? new BigNumber(rawEarningsBalance).multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        {earningsBusd > 0 && <CardBusdValue value={earningsBusd} />}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n"]},"metadata":{},"sourceType":"module"}