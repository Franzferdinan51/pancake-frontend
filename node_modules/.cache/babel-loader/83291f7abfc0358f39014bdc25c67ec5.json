{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport { useWeb3React } from '@web3-react/core';\n\nconst useIsRefundable = epoch => {\n  _s();\n\n  const [isRefundable, setIsRefundable] = useState(false);\n  const predictionsContract = usePredictionsContract();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call();\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call();\n        setIsRefundable(refundable);\n      } else {\n        setIsRefundable(false);\n      }\n    };\n\n    if (account) {\n      fetchRefundableStatus();\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable]);\n  return {\n    isRefundable,\n    setIsRefundable\n  };\n};\n\n_s(useIsRefundable, \"s8xQnnABddc2ndJTx/Z1iX87AIw=\", false, function () {\n  return [usePredictionsContract, useWeb3React];\n});\n\nexport default useIsRefundable;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/hooks/useIsRefundable.ts"],"names":["useEffect","useState","usePredictionsContract","useWeb3React","useIsRefundable","epoch","isRefundable","setIsRefundable","predictionsContract","account","fetchRefundableStatus","canClaim","methods","claimable","call","refundable"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,sBAAT,QAAuC,mBAAvC;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAmB;AAAA;;AACzC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMO,mBAAmB,GAAGN,sBAAsB,EAAlD;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,qBAAqB,GAAG,YAAY;AACxC,YAAMC,QAAQ,GAAG,MAAMH,mBAAmB,CAACI,OAApB,CAA4BC,SAA5B,CAAsCR,KAAtC,EAA6CI,OAA7C,EAAsDK,IAAtD,EAAvB;;AAEA,UAAIH,QAAJ,EAAc;AACZ,cAAMI,UAAU,GAAG,MAAMP,mBAAmB,CAACI,OAApB,CAA4BG,UAA5B,CAAuCV,KAAvC,EAA8CI,OAA9C,EAAuDK,IAAvD,EAAzB;AACAP,QAAAA,eAAe,CAACQ,UAAD,CAAf;AACD,OAHD,MAGO;AACLR,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KATD;;AAWA,QAAIE,OAAJ,EAAa;AACXC,MAAAA,qBAAqB;AACtB;AACF,GAfQ,EAeN,CAACD,OAAD,EAAUJ,KAAV,EAAiBG,mBAAjB,EAAsCD,eAAtC,CAfM,CAAT;AAiBA,SAAO;AAAED,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAP;AACD,CAvBD;;GAAMH,e;UAEwBF,sB,EACRC,Y;;;AAsBtB,eAAeC,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n"]},"metadata":{},"sourceType":"module"}