{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Flex, Text, Box } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCake, useCakeVaultContract } from 'hooks/useContract';\nimport useLastUpdated from 'hooks/useLastUpdated';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport VaultApprovalAction from './VaultApprovalAction';\nimport VaultStakeActions from './VaultStakeActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InlineText = styled(Text)`\n  display: inline;\n`;\n_c = InlineText;\n\nconst CakeVaultCardActions = ({\n  pool,\n  accountHasSharesStaked,\n  isLoading\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    stakingToken,\n    userData\n  } = pool;\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  const [isVaultApproved, setIsVaultApproved] = useState(false);\n  const cakeContract = useCake();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    t\n  } = useTranslation();\n  const stakingTokenBalance = (userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance) ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO;\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call();\n        const currentAllowance = new BigNumber(response);\n        setIsVaultApproved(currentAllowance.gt(0));\n      } catch (error) {\n        setIsVaultApproved(false);\n      }\n    };\n\n    checkApprovalStatus();\n  }, [account, cakeContract, cakeVaultContract, lastUpdated]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"inline\",\n        children: [/*#__PURE__*/_jsxDEV(InlineText, {\n          color: accountHasSharesStaked ? 'secondary' : 'textSubtle',\n          textTransform: \"uppercase\",\n          bold: true,\n          fontSize: \"12px\",\n          children: [accountHasSharesStaked ? stakingToken.symbol : t(`stake`), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InlineText, {\n          color: accountHasSharesStaked ? 'textSubtle' : 'secondary',\n          textTransform: \"uppercase\",\n          bold: true,\n          fontSize: \"12px\",\n          children: accountHasSharesStaked ? t(`staked (compounding)`) : `${stakingToken.symbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), isVaultApproved ? /*#__PURE__*/_jsxDEV(VaultStakeActions, {\n        isLoading: isLoading,\n        pool: pool,\n        stakingTokenBalance: stakingTokenBalance,\n        accountHasSharesStaked: accountHasSharesStaked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(VaultApprovalAction, {\n        pool: pool,\n        isLoading: isLoading,\n        setLastUpdated: setLastUpdated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CakeVaultCardActions, \"WL/KN9cCdRYR7THMkCgyfVPAcno=\", false, function () {\n  return [useWeb3React, useLastUpdated, useCake, useCakeVaultContract, useTranslation];\n});\n\n_c2 = CakeVaultCardActions;\nexport default CakeVaultCardActions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"InlineText\");\n$RefreshReg$(_c2, \"CakeVaultCardActions\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/VaultCardActions/index.tsx"],"names":["BigNumber","React","useEffect","useState","styled","Flex","Text","Box","useWeb3React","useTranslation","useCake","useCakeVaultContract","useLastUpdated","BIG_ZERO","VaultApprovalAction","VaultStakeActions","InlineText","CakeVaultCardActions","pool","accountHasSharesStaked","isLoading","account","stakingToken","userData","lastUpdated","setLastUpdated","isVaultApproved","setIsVaultApproved","cakeContract","cakeVaultContract","t","stakingTokenBalance","checkApprovalStatus","response","methods","allowance","options","address","call","currentAllowance","gt","error","symbol"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Box } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport VaultApprovalAction from './VaultApprovalAction'\nimport VaultStakeActions from './VaultStakeActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\nconst CakeVaultCardActions: React.FC<{\n  pool: Pool\n  accountHasSharesStaked: boolean\n  isLoading: boolean\n}> = ({ pool, accountHasSharesStaked, isLoading }) => {\n  const { account } = useWeb3React()\n  const { stakingToken, userData } = pool\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { t } = useTranslation()\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        <Box display=\"inline\">\n          <InlineText\n            color={accountHasSharesStaked ? 'secondary' : 'textSubtle'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? stakingToken.symbol : t(`stake`)}{' '}\n          </InlineText>\n          <InlineText\n            color={accountHasSharesStaked ? 'textSubtle' : 'secondary'}\n            textTransform=\"uppercase\"\n            bold\n            fontSize=\"12px\"\n          >\n            {accountHasSharesStaked ? t(`staked (compounding)`) : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {isVaultApproved ? (\n          <VaultStakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            accountHasSharesStaked={accountHasSharesStaked}\n          />\n        ) : (\n          <VaultApprovalAction pool={pool} isLoading={isLoading} setLastUpdated={setLastUpdated} />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CakeVaultCardActions\n"]},"metadata":{},"sourceType":"module"}