{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { useBlock, useLpTokenPrice } from 'state/hooks';\nimport { useIfoV2Contract } from 'hooks/useContract';\nimport useRefresh from 'hooks/useRefresh';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getStatus } from '../helpers'; // https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\n\nconst TAX_PRECISION = 10000000000;\n\nconst formatPool = pool => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5])\n});\n/**\n * Gets all public data of an IFO\n */\n\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const contract = useIfoV2Contract(address);\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await makeBatchRequest([contract.methods.startBlock().call, contract.methods.endBlock().call, contract.methods.viewPoolInformation(0).call, contract.methods.viewPoolInformation(1).call, contract.methods.viewPoolTaxRateOverflow(1).call, contract.methods.numberPoints().call]);\n    const poolBasicFormatted = formatPool(poolBasic);\n    const poolUnlimitedFormatted = formatPool(poolUnlimited);\n    const startBlockNum = parseInt(startBlock, 10);\n    const endBlockNum = parseInt(endBlock, 10);\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n    const totalBlocks = endBlockNum - startBlockNum;\n    const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n    const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n    setState(prev => ({ ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted,\n        taxRate: 0\n      },\n      poolUnlimited: { ...poolUnlimitedFormatted,\n        taxRate: taxRate / TAX_PRECISION\n      },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints\n    }));\n  }, [contract, currentBlock, releaseBlockNumber]);\n  useEffect(() => {\n    fetchIfoData();\n  }, [fetchIfoData, fastRefresh]);\n  return { ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd,\n    fetchIfoData\n  };\n};\n\n_s(useGetPublicIfoData, \"ZQY5jHSHqeLE/GC7XwfUNMKsQdA=\", false, function () {\n  return [useLpTokenPrice, useRefresh, useBlock, useIfoV2Contract];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/hooks/ifo/v2/useGetPublicIfoData.ts"],"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","useBlock","useLpTokenPrice","useIfoV2Contract","useRefresh","makeBatchRequest","BIG_ZERO","getStatus","TAX_PRECISION","formatPool","pool","raisingAmountPool","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","fastRefresh","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","currentBlock","contract","fetchIfoData","startBlock","endBlock","methods","call","viewPoolInformation","viewPoolTaxRateOverflow","poolBasicFormatted","poolUnlimitedFormatted","parseInt","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData, PoolCharacteristics } from '../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: new BigNumber(pool[0]),\n  offeringAmountPool: new BigNumber(pool[1]),\n  limitPerUserInLP: new BigNumber(pool[2]),\n  hasTax: pool[3],\n  totalAmountPool: new BigNumber(pool[4]),\n  sumTaxesOverflow: new BigNumber(pool[5]),\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV2Contract(address)\n\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = (await makeBatchRequest([\n      contract.methods.startBlock().call,\n      contract.methods.endBlock().call,\n      contract.methods.viewPoolInformation(0).call,\n      contract.methods.viewPoolInformation(1).call,\n      contract.methods.viewPoolTaxRateOverflow(1).call,\n      contract.methods.numberPoints().call,\n    ])) as [string, string, PoolCharacteristics, PoolCharacteristics, number, number]\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = parseInt(startBlock, 10)\n    const endBlockNum = parseInt(endBlock, 10)\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRate / TAX_PRECISION },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints,\n    }))\n  }, [contract, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}