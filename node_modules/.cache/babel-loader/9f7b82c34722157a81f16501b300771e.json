{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCake, useCakeVaultContract } from 'hooks/useContract';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ApprovalAction = ({\n  pool,\n  isLoading = false,\n  setLastUpdated\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    stakingToken\n  } = pool;\n  const cakeVaultContract = useCakeVaultContract();\n  const cakeContract = useCake();\n  const {\n    t\n  } = useTranslation();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n\n  const handleApprove = () => {\n    cakeContract.methods.approve(cakeVaultContract.options.address, ethers.constants.MaxUint256).send({\n      from: account\n    }).on('sending', () => {\n      setRequestedApproval(true);\n    }).on('receipt', () => {\n      toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the %symbol% vault!`, {\n        symbol: stakingToken.symbol\n      })}`);\n      setLastUpdated();\n      setRequestedApproval(false);\n    }).on('error', error => {\n      console.error(error);\n      toastError(`${t('Error')}`, `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`);\n      setRequestedApproval(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: \"52px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: requestedApproval,\n      endIcon: requestedApproval ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 40\n      }, this) : null,\n      disabled: requestedApproval,\n      onClick: handleApprove,\n      width: \"100%\",\n      children: t('Enable')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(ApprovalAction, \"ceU2rEk8ZMS9UPP6+un4BSkDKQc=\", false, function () {\n  return [useWeb3React, useCakeVaultContract, useCake, useTranslation, useToast];\n});\n\n_c = ApprovalAction;\nexport default ApprovalAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApprovalAction\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/VaultCardActions/VaultApprovalAction.tsx"],"names":["React","useState","Button","AutoRenewIcon","Skeleton","useWeb3React","ethers","useTranslation","useCake","useCakeVaultContract","useToast","ApprovalAction","pool","isLoading","setLastUpdated","account","stakingToken","cakeVaultContract","cakeContract","t","requestedApproval","setRequestedApproval","toastSuccess","toastError","handleApprove","methods","approve","options","address","constants","MaxUint256","send","from","on","symbol","error","console"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,QAAhC,QAAgD,oBAAhD;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,OAAT,EAAkBC,oBAAlB,QAA8C,mBAA9C;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;;AASA,MAAMC,cAA6C,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,SAAS,GAAG,KAApB;AAA2BC,EAAAA;AAA3B,CAAD,KAAiD;AAAA;;AACrG,QAAM;AAAEC,IAAAA;AAAF,MAAcV,YAAY,EAAhC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAmBJ,IAAzB;AACA,QAAMK,iBAAiB,GAAGR,oBAAoB,EAA9C;AACA,QAAMS,YAAY,GAAGV,OAAO,EAA5B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAQZ,cAAc,EAA5B;AACA,QAAM,CAACa,iBAAD,EAAoBC,oBAApB,IAA4CpB,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAEqB,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA+Bb,QAAQ,EAA7C;;AAEA,QAAMc,aAAa,GAAG,MAAM;AAC1BN,IAAAA,YAAY,CAACO,OAAb,CACGC,OADH,CACWT,iBAAiB,CAACU,OAAlB,CAA0BC,OADrC,EAC8CtB,MAAM,CAACuB,SAAP,CAAiBC,UAD/D,EAEGC,IAFH,CAEQ;AAAEC,MAAAA,IAAI,EAAEjB;AAAR,KAFR,EAGGkB,EAHH,CAGM,SAHN,EAGiB,MAAM;AACnBZ,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,KALH,EAMGY,EANH,CAMM,SANN,EAMiB,MAAM;AACnBX,MAAAA,YAAY,CACT,GAAEH,CAAC,CAAC,kBAAD,CAAqB,EADf,EAET,GAAEA,CAAC,CAAE,0CAAF,EAA6C;AAAEe,QAAAA,MAAM,EAAElB,YAAY,CAACkB;AAAvB,OAA7C,CAA8E,EAFxE,CAAZ;AAIApB,MAAAA,cAAc;AACdO,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,KAbH,EAcGY,EAdH,CAcM,OAdN,EAcgBE,KAAD,IAAW;AACtBC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAZ,MAAAA,UAAU,CACP,GAAEJ,CAAC,CAAC,OAAD,CAAU,EADN,EAEP,GAAEA,CAAC,CAAE,oFAAF,CAAuF,EAFnF,CAAV;AAIAE,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,KArBH;AAsBD,GAvBD;;AAyBA,sBACE;AAAA,cACGR,SAAS,gBACR,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAuB,MAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YADQ,gBAGR,QAAC,MAAD;AACE,MAAA,SAAS,EAAEO,iBADb;AAEE,MAAA,OAAO,EAAEA,iBAAiB,gBAAG,QAAC,aAAD;AAAe,QAAA,IAAI,MAAnB;AAAoB,QAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,cAAH,GAAiD,IAF7E;AAGE,MAAA,QAAQ,EAAEA,iBAHZ;AAIE,MAAA,OAAO,EAAEI,aAJX;AAKE,MAAA,KAAK,EAAC,MALR;AAAA,gBAOGL,CAAC,CAAC,QAAD;AAPJ;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAiBD,CAnDD;;GAAMR,c;UACgBN,Y,EAEMI,oB,EACLD,O,EACPD,c,EAEuBG,Q;;;KAPjCC,c;AAqDN,eAAeA,cAAf","sourcesContent":["import React, { useState } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useCakeVaultContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { Pool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: Pool\n  setLastUpdated: () => void\n  isLoading?: boolean\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false, setLastUpdated }) => {\n  const { account } = useWeb3React()\n  const { stakingToken } = pool\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(\n          `${t('Contract Enabled')}`,\n          `${t(`You can now stake in the %symbol% vault!`, { symbol: stakingToken.symbol })}`,\n        )\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n        setRequestedApproval(false)\n      })\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n"]},"metadata":{},"sourceType":"module"}