{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport poolsConfig from 'config/constants/pools';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools';\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser';\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic';\nimport fetchVaultUser from './fetchVaultUser';\nconst initialState = {\n  data: [...poolsConfig],\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalCakeInVault: null,\n    estimatedCakeBountyReward: null,\n    totalPendingCakeHarvest: null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      cakeAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null\n    }\n  }\n}; // Thunks\n\nexport const fetchPoolsPublicDataAsync = () => async dispatch => {\n  const blockLimits = await fetchPoolsBlockLimits();\n  const totalStakings = await fetchPoolsTotalStaking();\n  const liveData = poolsConfig.map(pool => {\n    const blockLimit = blockLimits.find(entry => entry.sousId === pool.sousId);\n    const totalStaking = totalStakings.find(entry => entry.sousId === pool.sousId);\n    return { ...blockLimit,\n      ...totalStaking\n    };\n  });\n  dispatch(setPoolsPublicData(liveData));\n};\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\n  const poolsWithStakingLimit = getState().pools.data.filter(({\n    stakingLimit\n  }) => stakingLimit !== null && stakingLimit !== undefined).map(pool => pool.sousId);\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit);\n  const stakingLimitData = poolsConfig.map(pool => {\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\n      return {\n        sousId: pool.sousId\n      };\n    }\n\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO;\n    return {\n      sousId: pool.sousId,\n      stakingLimit: stakingLimit.toJSON()\n    };\n  });\n  dispatch(setPoolsPublicData(stakingLimitData));\n};\nexport const fetchPoolsUserDataAsync = account => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  const stakingTokenBalances = await fetchUserBalances(account);\n  const stakedBalances = await fetchUserStakeBalances(account);\n  const pendingRewards = await fetchUserPendingRewards(account);\n  const userData = poolsConfig.map(pool => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId]\n  }));\n  dispatch(setPoolsUserData(userData));\n};\nexport const updateUserAllowance = (sousId, account) => async dispatch => {\n  const allowances = await fetchPoolsAllowance(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'allowance',\n    value: allowances[sousId]\n  }));\n};\nexport const updateUserBalance = (sousId, account) => async dispatch => {\n  const tokenBalances = await fetchUserBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakingTokenBalance',\n    value: tokenBalances[sousId]\n  }));\n};\nexport const updateUserStakedBalance = (sousId, account) => async dispatch => {\n  const stakedBalances = await fetchUserStakeBalances(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'stakedBalance',\n    value: stakedBalances[sousId]\n  }));\n};\nexport const updateUserPendingReward = (sousId, account) => async dispatch => {\n  const pendingRewards = await fetchUserPendingRewards(account);\n  dispatch(updatePoolsUserData({\n    sousId,\n    field: 'pendingReward',\n    value: pendingRewards[sousId]\n  }));\n};\nexport const fetchCakeVaultPublicData = createAsyncThunk('cakeVault/fetchPublicData', async () => {\n  const publicVaultInfo = await fetchPublicVaultData();\n  return publicVaultInfo;\n});\nexport const fetchCakeVaultFees = createAsyncThunk('cakeVault/fetchFees', async () => {\n  const vaultFees = await fetchVaultFees();\n  return vaultFees;\n});\nexport const fetchCakeVaultUserData = createAsyncThunk('cakeVault/fetchUser', async ({\n  account\n}) => {\n  const userData = await fetchVaultUser(account);\n  return userData;\n});\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData = action.payload;\n      state.data = state.data.map(pool => {\n        const livePoolData = livePoolsData.find(entry => entry.sousId === pool.sousId);\n        return { ...pool,\n          ...livePoolData\n        };\n      });\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload;\n      state.data = state.data.map(pool => {\n        const userPoolData = userData.find(entry => entry.sousId === pool.sousId);\n        return { ...pool,\n          userData: userPoolData\n        };\n      });\n    },\n    updatePoolsUserData: (state, action) => {\n      const {\n        field,\n        value,\n        sousId\n      } = action.payload;\n      const index = state.data.findIndex(p => p.sousId === sousId);\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index],\n          userData: { ...state.data[index].userData,\n            [field]: value\n          }\n        };\n      }\n    }\n  },\n  extraReducers: builder => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action) => {\n      state.cakeVault = { ...state.cakeVault,\n        ...action.payload\n      };\n    }); // Vault fees\n\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action) => {\n      const fees = action.payload;\n      state.cakeVault = { ...state.cakeVault,\n        fees\n      };\n    }); // Vault user data\n\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action) => {\n      const userData = action.payload;\n      userData.isLoading = false;\n      state.cakeVault = { ...state.cakeVault,\n        userData\n      };\n    });\n  }\n}); // Actions\n\nexport const {\n  setPoolsPublicData,\n  setPoolsUserData,\n  updatePoolsUserData\n} = PoolsSlice.actions;\nexport default PoolsSlice.reducer;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/state/pools/index.ts"],"names":["createAsyncThunk","createSlice","poolsConfig","BIG_ZERO","fetchPoolsBlockLimits","fetchPoolsStakingLimits","fetchPoolsTotalStaking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","fetchPublicVaultData","fetchVaultFees","fetchVaultUser","initialState","data","cakeVault","totalShares","pricePerFullShare","totalCakeInVault","estimatedCakeBountyReward","totalPendingCakeHarvest","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userShares","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","fetchPoolsPublicDataAsync","dispatch","blockLimits","totalStakings","liveData","map","pool","blockLimit","find","entry","sousId","totalStaking","setPoolsPublicData","fetchPoolsStakingLimitsAsync","getState","poolsWithStakingLimit","pools","filter","stakingLimit","undefined","stakingLimits","stakingLimitData","includes","toJSON","fetchPoolsUserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","setPoolsUserData","updateUserAllowance","updatePoolsUserData","field","value","updateUserBalance","tokenBalances","updateUserStakedBalance","updateUserPendingReward","fetchCakeVaultPublicData","publicVaultInfo","fetchCakeVaultFees","vaultFees","fetchCakeVaultUserData","PoolsSlice","name","reducers","state","action","livePoolsData","payload","livePoolData","userPoolData","index","findIndex","p","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PoolsState, Pool, CakeVault, VaultFees, VaultUser } from 'state/types'\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\nimport fetchVaultUser from './fetchVaultUser'\n\nconst initialState: PoolsState = {\n  data: [...poolsConfig],\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalCakeInVault: null,\n    estimatedCakeBountyReward: null,\n    totalPendingCakeHarvest: null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      cakeAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n    },\n  },\n}\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStaking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\n  const poolsWithStakingLimit = getState()\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\n    .map((pool) => pool.sousId)\n\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\n\n  const stakingLimitData = poolsConfig.map((pool) => {\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\n      return { sousId: pool.sousId }\n    }\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\n    return {\n      sousId: pool.sousId,\n      stakingLimit: stakingLimit.toJSON(),\n    }\n  })\n\n  dispatch(setPoolsPublicData(stakingLimitData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: number, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: number, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: number, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: number, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\n  const publicVaultInfo = await fetchPublicVaultData()\n  return publicVaultInfo\n})\n\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\n  const vaultFees = await fetchVaultFees()\n  return vaultFees\n})\n\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\n  'cakeVault/fetchUser',\n  async ({ account }) => {\n    const userData = await fetchVaultUser(account)\n    return userData\n  },\n)\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\n    })\n    // Vault fees\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\n      const fees = action.payload\n      state.cakeVault = { ...state.cakeVault, fees }\n    })\n    // Vault user data\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\n      const userData = action.payload\n      userData.isLoading = false\n      state.cakeVault = { ...state.cakeVault, userData }\n    })\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\nexport default PoolsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}