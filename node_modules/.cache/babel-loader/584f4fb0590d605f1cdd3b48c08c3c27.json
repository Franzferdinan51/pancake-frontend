{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Lottery/components/PastDrawsHistory/HistoryChart.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { lazy, Suspense, useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { Text } from '@pancakeswap/uikit';\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext';\nimport { useTranslation } from 'contexts/Localization';\nimport useTheme from 'hooks/useTheme';\nimport Loading from '../Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Line = /*#__PURE__*/lazy(_c = () => import('./LineChartWrapper'));\n_c2 = Line;\nconst Bar = /*#__PURE__*/lazy(_c3 = () => import('./BarChartWrapper'));\n_c4 = Bar;\nconst InnerWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c5 = InnerWrapper;\n\nconst HistoryChart = ({\n  showLast\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isDark\n  } = useTheme();\n  const {\n    historyData,\n    historyError\n  } = useContext(PastLotteryDataContext);\n\n  const getDataArray = kind => {\n    const rawData = historyData.map(dataPoint => {\n      return dataPoint[kind];\n    }).reverse();\n    return showLast === 'max' ? rawData : rawData.slice(Number(showLast) * -1);\n  };\n\n  const lineStyles = ({\n    color\n  }) => {\n    return {\n      borderColor: color,\n      fill: false,\n      borderWidth: 2,\n      pointRadius: 0,\n      pointHitRadius: 10\n    };\n  };\n\n  const chartData = {\n    labels: getDataArray('lotteryNumber'),\n    datasets: [{\n      label: 'Pool Size',\n      data: getDataArray('poolSize'),\n      yAxisID: 'y-axis-pool',\n      ...lineStyles({\n        color: '#8F80BA'\n      })\n    }, {\n      label: 'Burned',\n      data: getDataArray('burned'),\n      yAxisID: 'y-axis-burned',\n      ...lineStyles({\n        color: '#1FC7D4'\n      })\n    }]\n  };\n\n  const axesStyles = ({\n    color,\n    lineHeight\n  }) => {\n    return {\n      borderCapStyle: 'round',\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        fontFamily: 'Kanit, sans-serif',\n        fontColor: color,\n        fontSize: 12,\n        lineHeight,\n        maxRotation: 0,\n        beginAtZero: true,\n        autoSkipPadding: 15,\n        userCallback: value => {\n          return value.toLocaleString();\n        }\n      }\n    };\n  };\n\n  const options = useMemo(() => {\n    return {\n      tooltips: {\n        mode: 'index',\n        intersect: false\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        yAxes: [{\n          type: 'linear',\n          position: 'left',\n          id: 'y-axis-pool',\n          ...axesStyles({\n            color: '#8f80ba',\n            lineHeight: 1.6\n          })\n        }, {\n          type: 'linear',\n          position: 'right',\n          id: 'y-axis-burned',\n          ...axesStyles({\n            color: '#1FC7D4',\n            lineHeight: 1.5\n          })\n        }],\n        xAxes: [{ ...axesStyles({\n            color: isDark ? '#FFFFFF' : '#452A7A',\n            lineHeight: 1\n          })\n        }]\n      }\n    };\n  }, [isDark]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [historyError && /*#__PURE__*/_jsxDEV(InnerWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: t('Error fetching data')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), !historyError && historyData.length > 1 ? /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: t('Loading...')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }, this),\n      children: showLast === 50 || showLast === 100 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options,\n        type: \"line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(InnerWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HistoryChart, \"gjUWSc50k+zExPt77+ONdiPC0vQ=\", false, function () {\n  return [useTranslation, useTheme];\n});\n\n_c6 = HistoryChart;\nexport default HistoryChart;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Line$lazy\");\n$RefreshReg$(_c2, \"Line\");\n$RefreshReg$(_c3, \"Bar$lazy\");\n$RefreshReg$(_c4, \"Bar\");\n$RefreshReg$(_c5, \"InnerWrapper\");\n$RefreshReg$(_c6, \"HistoryChart\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Lottery/components/PastDrawsHistory/HistoryChart.tsx"],"names":["React","lazy","Suspense","useContext","useMemo","styled","Text","PastLotteryDataContext","useTranslation","useTheme","Loading","Line","Bar","InnerWrapper","div","HistoryChart","showLast","t","isDark","historyData","historyError","getDataArray","kind","rawData","map","dataPoint","reverse","slice","Number","lineStyles","color","borderColor","fill","borderWidth","pointRadius","pointHitRadius","chartData","labels","datasets","label","data","yAxisID","axesStyles","lineHeight","borderCapStyle","gridLines","display","ticks","fontFamily","fontColor","fontSize","maxRotation","beginAtZero","autoSkipPadding","userCallback","value","toLocaleString","options","tooltips","mode","intersect","legend","scales","yAxes","type","position","id","xAxes","length"],"mappings":"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","sourcesContent":["import React, { lazy, Suspense, useContext, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport Loading from '../Loading'\n\nconst Line = lazy(() => import('./LineChartWrapper'))\nconst Bar = lazy(() => import('./BarChartWrapper'))\n\nconst InnerWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\ninterface HistoryChartProps {\n  showLast: 'max' | number\n}\n\nconst HistoryChart: React.FC<HistoryChartProps> = ({ showLast }) => {\n  const { t } = useTranslation()\n  const { isDark } = useTheme()\n  const { historyData, historyError } = useContext(PastLotteryDataContext)\n  const getDataArray = (kind) => {\n    const rawData = historyData\n      .map((dataPoint) => {\n        return dataPoint[kind]\n      })\n      .reverse()\n\n    return showLast === 'max' ? rawData : rawData.slice(Number(showLast) * -1)\n  }\n\n  const lineStyles = ({ color }) => {\n    return {\n      borderColor: color,\n      fill: false,\n      borderWidth: 2,\n      pointRadius: 0,\n      pointHitRadius: 10,\n    }\n  }\n\n  const chartData = {\n    labels: getDataArray('lotteryNumber'),\n    datasets: [\n      {\n        label: 'Pool Size',\n        data: getDataArray('poolSize'),\n        yAxisID: 'y-axis-pool',\n        ...lineStyles({ color: '#8F80BA' }),\n      },\n      {\n        label: 'Burned',\n        data: getDataArray('burned'),\n        yAxisID: 'y-axis-burned',\n        ...lineStyles({ color: '#1FC7D4' }),\n      },\n    ],\n  }\n\n  const axesStyles = ({ color, lineHeight }) => {\n    return {\n      borderCapStyle: 'round',\n      gridLines: { display: false },\n      ticks: {\n        fontFamily: 'Kanit, sans-serif',\n        fontColor: color,\n        fontSize: 12,\n        lineHeight,\n        maxRotation: 0,\n        beginAtZero: true,\n        autoSkipPadding: 15,\n        userCallback: (value) => {\n          return value.toLocaleString()\n        },\n      },\n    }\n  }\n\n  const options = useMemo(() => {\n    return {\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n      },\n      legend: { display: false },\n      scales: {\n        yAxes: [\n          {\n            type: 'linear',\n            position: 'left',\n            id: 'y-axis-pool',\n            ...axesStyles({ color: '#8f80ba', lineHeight: 1.6 }),\n          },\n          {\n            type: 'linear',\n            position: 'right',\n            id: 'y-axis-burned',\n            ...axesStyles({ color: '#1FC7D4', lineHeight: 1.5 }),\n          },\n        ],\n        xAxes: [\n          {\n            ...axesStyles({ color: isDark ? '#FFFFFF' : '#452A7A', lineHeight: 1 }),\n          },\n        ],\n      },\n    }\n  }, [isDark])\n\n  return (\n    <>\n      {historyError && (\n        <InnerWrapper>\n          <Text>{t('Error fetching data')}</Text>\n        </InnerWrapper>\n      )}\n      {!historyError && historyData.length > 1 ? (\n        <Suspense fallback={<div>{t('Loading...')}</div>}>\n          {showLast === 50 || showLast === 100 ? (\n            <Bar data={chartData} options={options} />\n          ) : (\n            <Line data={chartData} options={options} type=\"line\" />\n          )}\n        </Suspense>\n      ) : (\n        <InnerWrapper>\n          <Loading />\n        </InnerWrapper>\n      )}\n    </>\n  )\n}\n\nexport default HistoryChart\n"]},"metadata":{},"sourceType":"module"}