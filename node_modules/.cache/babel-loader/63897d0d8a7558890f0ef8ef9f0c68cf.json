{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BIG_TEN } from './bigNumber';\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\n\nexport const getDecimalAmount = (amount, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals));\n};\nexport const getBalanceAmount = (amount, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals));\n};\n/**\n * This function is not really necessary but is used throughout the site.\n */\n\nexport const getBalanceNumber = (balance, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber();\n};\nexport const getFullDisplayBalance = (balance, decimals = 18, decimalsToAppear) => {\n  return getBalanceAmount(balance, decimals).toFixed(decimalsToAppear);\n};\nexport const formatNumber = (number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision\n  };\n  return number.toLocaleString(undefined, options);\n};","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/utils/formatBalance.ts"],"names":["BigNumber","BIG_TEN","getDecimalAmount","amount","decimals","times","pow","getBalanceAmount","dividedBy","getBalanceNumber","balance","toNumber","getFullDisplayBalance","decimalsToAppear","toFixed","formatNumber","number","minPrecision","maxPrecision","options","minimumFractionDigits","maximumFractionDigits","toLocaleString","undefined"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,MAAD,EAAoBC,QAAQ,GAAG,EAA/B,KAAsC;AACpE,SAAO,IAAIJ,SAAJ,CAAcG,MAAd,EAAsBE,KAAtB,CAA4BJ,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAA5B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,gBAAgB,GAAG,CAACJ,MAAD,EAAoBC,QAAQ,GAAG,EAA/B,KAAsC;AACpE,SAAO,IAAIJ,SAAJ,CAAcG,MAAd,EAAsBK,SAAtB,CAAgCP,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAAhC,CAAP;AACD,CAFM;AAIP;AACA;AACA;;AACA,OAAO,MAAMK,gBAAgB,GAAG,CAACC,OAAD,EAAqBN,QAAQ,GAAG,EAAhC,KAAuC;AACrE,SAAOG,gBAAgB,CAACG,OAAD,EAAUN,QAAV,CAAhB,CAAoCO,QAApC,EAAP;AACD,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAG,CAACF,OAAD,EAAqBN,QAAQ,GAAG,EAAhC,EAAoCS,gBAApC,KAAkE;AACrG,SAAON,gBAAgB,CAACG,OAAD,EAAUN,QAAV,CAAhB,CAAoCU,OAApC,CAA4CD,gBAA5C,CAAP;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAG,CAACC,MAAD,EAAiBC,YAAY,GAAG,CAAhC,EAAmCC,YAAY,GAAG,CAAlD,KAAwD;AAClF,QAAMC,OAAO,GAAG;AACdC,IAAAA,qBAAqB,EAAEH,YADT;AAEdI,IAAAA,qBAAqB,EAAEH;AAFT,GAAhB;AAIA,SAAOF,MAAM,CAACM,cAAP,CAAsBC,SAAtB,EAAiCJ,OAAjC,CAAP;AACD,CANM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BIG_TEN } from './bigNumber'\n\n/**\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\n */\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\n}\n\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\n}\n\n/**\n * This function is not really necessary but is used throughout the site.\n */\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  return getBalanceAmount(balance, decimals).toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, decimalsToAppear?: number) => {\n  return getBalanceAmount(balance, decimals).toFixed(decimalsToAppear)\n}\n\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\n  const options = {\n    minimumFractionDigits: minPrecision,\n    maximumFractionDigits: maxPrecision,\n  }\n  return number.toLocaleString(undefined, options)\n}\n"]},"metadata":{},"sourceType":"module"}