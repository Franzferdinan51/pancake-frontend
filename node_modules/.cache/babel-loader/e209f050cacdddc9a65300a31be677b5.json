{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Helmet } from 'react-helmet-async';\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit';\nimport { useAppDispatch } from 'state';\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks';\nimport { getMarketData, getStaticPredictionsData, makeFutureRoundResponse, makeRoundData, transformRoundResponse } from 'state/predictions/helpers';\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions';\nimport { HistoryFilter, PredictionStatus } from 'state/types';\nimport usePersistState from 'hooks/usePersistState';\nimport PageLoader from 'components/PageLoader';\nimport usePollOraclePrice from './hooks/usePollOraclePrice';\nimport usePollRoundData from './hooks/usePollRoundData';\nimport Container from './components/Container';\nimport CollectWinningsPopup from './components/CollectWinningsPopup';\nimport SwiperProvider from './context/SwiperProvider';\nimport Desktop from './Desktop';\nimport Mobile from './Mobile';\nimport RiskDisclaimer from './components/RiskDisclaimer';\nimport ChartDisclaimer from './components/ChartDisclaimer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FUTURE_ROUND_COUNT = 2; // the number of rounds in the future to show\n\nconst Predictions = () => {\n  _s();\n\n  const {\n    isXl\n  } = useMatchBreakpoints();\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk');\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, 'pancake_predictions_chart');\n  const {\n    account\n  } = useWeb3React();\n  const status = useGetPredictionsStatus();\n  const isChartPaneOpen = useIsChartPaneOpen();\n  const dispatch = useAppDispatch();\n  const initialBlock = useInitialBlock();\n  const isDesktop = isXl;\n\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true);\n\n  const handleAcceptChart = () => setHasAcceptedChart(true);\n\n  const [onPresentRiskDisclaimer] = useModal( /*#__PURE__*/_jsxDEV(RiskDisclaimer, {\n    onSuccess: handleAcceptRiskSuccess\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 46\n  }, this), false);\n  const [onPresentChartDisclaimer] = useModal( /*#__PURE__*/_jsxDEV(ChartDisclaimer, {\n    onSuccess: handleAcceptChart\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 47\n  }, this), false); // TODO: memoize modal's handlers\n\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer);\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer); // Disclaimer\n\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current();\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef]); // Chart Disclaimer\n\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current();\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen]);\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()]);\n      const {\n        currentEpoch,\n        intervalBlocks,\n        bufferBlocks\n      } = staticPredictionsData;\n      const latestRound = marketData.rounds.find(round => round.epoch === currentEpoch); // Fetch data on current unclaimed bets\n\n      dispatch(fetchCurrentBets({\n        account,\n        roundIds: marketData.rounds.map(round => round.id)\n      }));\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED));\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock);\n        const futureRounds = [];\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2;\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i));\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)]);\n        dispatch(initialize({ ...staticPredictionsData,\n          historyFilter: HistoryFilter.ALL,\n          currentRoundStartBlockNumber: currentRoundStartBlock,\n          rounds: roundData,\n          history: {},\n          bets: {}\n        }));\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR));\n      }\n    }; // Do not start initialization until the first block has been retrieved\n\n\n    if (initialBlock > 0) {\n      fetchInitialData();\n    }\n  }, [initialBlock, dispatch, account]);\n  usePollRoundData();\n  usePollOraclePrice();\n\n  if (status === PredictionStatus.INITIAL) {\n    return /*#__PURE__*/_jsxDEV(PageLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"https://s3.tradingview.com/tv.js\",\n        type: \"text/javascript\",\n        id: \"tradingViewWidget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SwiperProvider, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [isDesktop ? /*#__PURE__*/_jsxDEV(Desktop, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(Mobile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 38\n        }, this), /*#__PURE__*/_jsxDEV(CollectWinningsPopup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Predictions, \"aBa3NeGSu/Y4PgLYR1RTBVKo65M=\", false, function () {\n  return [useMatchBreakpoints, usePersistState, usePersistState, useWeb3React, useGetPredictionsStatus, useIsChartPaneOpen, useAppDispatch, useInitialBlock, useModal, useModal, usePollRoundData, usePollOraclePrice];\n});\n\n_c = Predictions;\nexport default Predictions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/index.tsx"],"names":["React","useEffect","useRef","useWeb3React","Helmet","useMatchBreakpoints","useModal","useAppDispatch","useGetPredictionsStatus","useInitialBlock","useIsChartPaneOpen","getMarketData","getStaticPredictionsData","makeFutureRoundResponse","makeRoundData","transformRoundResponse","fetchCurrentBets","initialize","setPredictionStatus","HistoryFilter","PredictionStatus","usePersistState","PageLoader","usePollOraclePrice","usePollRoundData","Container","CollectWinningsPopup","SwiperProvider","Desktop","Mobile","RiskDisclaimer","ChartDisclaimer","FUTURE_ROUND_COUNT","Predictions","isXl","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","account","status","isChartPaneOpen","dispatch","initialBlock","isDesktop","handleAcceptRiskSuccess","handleAcceptChart","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","current","fetchInitialData","staticPredictionsData","marketData","Promise","all","currentEpoch","intervalBlocks","bufferBlocks","latestRound","rounds","find","round","epoch","roundIds","map","id","market","paused","PAUSED","currentRoundStartBlock","Number","startBlock","futureRounds","halfInterval","i","push","roundData","historyFilter","ALL","currentRoundStartBlockNumber","history","bets","ERROR","INITIAL"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, 'pancake_predictions_accepted_risk')\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, 'pancake_predictions_chart')\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"]},"metadata":{},"sourceType":"module"}