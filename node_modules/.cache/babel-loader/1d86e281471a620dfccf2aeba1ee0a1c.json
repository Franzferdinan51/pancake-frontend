{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Farms/components/DepositModal.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit';\nimport ModalActions from 'components/ModalActions';\nimport ModalInput from 'components/ModalInput';\nimport { useTranslation } from 'contexts/Localization';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DepositModal = ({\n  max,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  addLiquidityUrl\n}) => {\n  _s();\n\n  const [val, setVal] = useState('');\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max);\n  }, [max]);\n  const valNumber = new BigNumber(val);\n  const fullBalanceNumber = new BigNumber(fullBalance);\n  const handleChange = useCallback(e => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value.replace(/,/g, '.'));\n    }\n  }, [setVal]);\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Stake LP tokens'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalInput, {\n      value: val,\n      onSelectMax: handleSelectMax,\n      onChange: handleChange,\n      max: fullBalance,\n      symbol: tokenName,\n      addLiquidityUrl: addLiquidityUrl,\n      inputTitle: t('Stake')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onDismiss,\n        width: \"100%\",\n        disabled: pendingTx,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        disabled: pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber),\n        onClick: async () => {\n          setPendingTx(true);\n          await onConfirm(val);\n          setPendingTx(false);\n          onDismiss();\n        },\n        children: pendingTx ? t('Pending Confirmation') : t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LinkExternal, {\n      href: addLiquidityUrl,\n      style: {\n        alignSelf: 'center'\n      },\n      children: [t('Get'), \" \", tokenName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DepositModal, \"ciyLuDeXL8Snh1R6wDC2fSQquSA=\", false, function () {\n  return [useTranslation];\n});\n\n_c = DepositModal;\nexport default DepositModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"DepositModal\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Farms/components/DepositModal.tsx"],"names":["BigNumber","React","useCallback","useMemo","useState","Button","Modal","LinkExternal","ModalActions","ModalInput","useTranslation","getFullDisplayBalance","DepositModal","max","onConfirm","onDismiss","tokenName","addLiquidityUrl","val","setVal","pendingTx","setPendingTx","t","fullBalance","valNumber","fullBalanceNumber","handleChange","e","currentTarget","validity","valid","value","replace","handleSelectMax","isFinite","eq","gt","alignSelf"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n"]},"metadata":{},"sourceType":"module"}