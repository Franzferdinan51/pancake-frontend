{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { ethers } from 'ethers';\nimport { BIG_TEN, BIG_ZERO } from './bigNumber';\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods.enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return masterChefContract.methods.deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n    from: account,\n    gas: 200000\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()).send({\n    from: account,\n    gas: 200000\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods.deposit().send({\n    from: account,\n    gas: 200000,\n    value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods.leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n    from: account,\n    gas: 200000\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()).send({\n    from: account,\n    gas: 200000\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods.emergencyWithdraw().send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods.leaveStaking('0').send({\n      from: account,\n      gas: 200000\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return masterChefContract.methods.deposit(pid, '0').send({\n    from: account,\n    gas: 200000\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit('0').send({\n    from: account,\n    gas: 200000\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit().send({\n    from: account,\n    gas: 200000,\n    value: BIG_ZERO\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/utils/callHelpers.ts"],"names":["BigNumber","DEFAULT_TOKEN_DECIMAL","ethers","BIG_TEN","BIG_ZERO","approve","lpContract","masterChefContract","account","methods","options","address","constants","MaxUint256","send","from","stake","pid","amount","enterStaking","times","toString","gas","on","tx","transactionHash","deposit","sousStake","sousChefContract","decimals","pow","sousStakeBnb","value","unstake","leaveStaking","withdraw","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","harvest","soushHarvest","soushHarvestBnb"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: 200000 })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: 200000 })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: 200000, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n"]},"metadata":{},"sourceType":"module"}