{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Button, Skeleton } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useHarvest } from 'hooks/useHarvest';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/hooks';\nimport { useCountUp } from 'react-countup';\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HarvestAction = ({\n  pid,\n  userData,\n  userDataReady\n}) => {\n  _s();\n\n  const earningsBigNumber = new BigNumber(userData.earnings);\n  const cakePrice = usePriceCakeBusd();\n  let earnings = 0;\n  let earningsBusd = 0;\n  let displayBalance = userDataReady ? earnings.toLocaleString() : /*#__PURE__*/_jsxDEV(Skeleton, {\n    width: 60\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 68\n  }, this); // If user didn't connect wallet default balance will be 0\n\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber);\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber();\n    displayBalance = earnings.toLocaleString();\n  }\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvest(pid);\n  const {\n    t\n  } = useTranslation();\n  const {\n    countUp,\n    update\n  } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3\n  });\n  const updateValue = useRef(update);\n  useEffect(() => {\n    updateValue.current(earningsBusd);\n  }, [earningsBusd, updateValue]);\n  return /*#__PURE__*/_jsxDEV(ActionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"CAKE \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Subtle, {\n        children: t('EARNED')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Earned, {\n          children: displayBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), countUp > 0 && /*#__PURE__*/_jsxDEV(Staked, {\n          children: [\"~\", countUp, \"USD\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !earnings || pendingTx || !userDataReady,\n        onClick: async () => {\n          setPendingTx(true);\n          await onReward();\n          setPendingTx(false);\n        },\n        ml: \"4px\",\n        children: t('Harvest')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestAction, \"wfEfoFycLSN3NfQeY08nbU1YkWI=\", false, function () {\n  return [usePriceCakeBusd, useHarvest, useTranslation, useCountUp];\n});\n\n_c = HarvestAction;\nexport default HarvestAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx"],"names":["React","useState","useRef","useEffect","Button","Skeleton","BigNumber","getBalanceNumber","useHarvest","useTranslation","usePriceCakeBusd","useCountUp","ActionContainer","ActionTitles","Title","Subtle","ActionContent","Earned","Staked","HarvestAction","pid","userData","userDataReady","earningsBigNumber","earnings","cakePrice","earningsBusd","displayBalance","toLocaleString","isZero","multipliedBy","toNumber","pendingTx","setPendingTx","onReward","t","countUp","update","start","end","duration","separator","decimals","updateValue","current"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport { Button, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = 0\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { t } = useTranslation()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>CAKE </Title>\n        <Subtle>{t('EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n"]},"metadata":{},"sourceType":"module"}