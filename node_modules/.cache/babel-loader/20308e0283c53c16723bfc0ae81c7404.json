{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract';\nimport { useIfoAllowance } from 'hooks/useAllowance';\nimport useRefresh from 'hooks/useRefresh';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const [state, setState] = useState({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false\n    }\n  });\n  const {\n    address,\n    currency\n  } = ifo;\n  const {\n    account\n  } = useWeb3React();\n  const contract = useIfoV2Contract(address);\n  const currencyContract = useERC20(getAddress(currency.address));\n  const allowance = useIfoAllowance(currencyContract, address);\n\n  const setPendingTx = (status, poolId) => setState(prevState => ({ ...prevState,\n    [poolId]: { ...prevState[poolId],\n      isPendingTx: status\n    }\n  }));\n\n  const setIsClaimed = poolId => {\n    setState(prevState => ({ ...prevState,\n      [poolId]: { ...prevState[poolId],\n        hasClaimed: true\n      }\n    }));\n  };\n\n  const fetchIfoData = useCallback(async () => {\n    const [userInfo, amounts] = await makeBatchRequest([contract.methods.viewUserInfo(account, [0, 1]).call, contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call]);\n    setState(prevState => ({ ...prevState,\n      poolBasic: { ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n        offeringAmountInToken: new BigNumber(amounts[0][0]),\n        refundingAmountInLP: new BigNumber(amounts[0][1]),\n        taxAmountInLP: new BigNumber(amounts[0][2]),\n        hasClaimed: userInfo[1][0]\n      },\n      poolUnlimited: { ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n        offeringAmountInToken: new BigNumber(amounts[1][0]),\n        refundingAmountInLP: new BigNumber(amounts[1][1]),\n        taxAmountInLP: new BigNumber(amounts[1][2]),\n        hasClaimed: userInfo[1][1]\n      }\n    }));\n  }, [account, contract]);\n  useEffect(() => {\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, fetchIfoData, fastRefresh]);\n  return { ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    setIsClaimed,\n    fetchIfoData\n  };\n};\n\n_s(useGetWalletIfoData, \"n56brgviGzvwtsKhegoTqttBsUU=\", false, function () {\n  return [useRefresh, useWeb3React, useIfoV2Contract, useERC20, useIfoAllowance];\n});\n\nexport default useGetWalletIfoData;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/hooks/ifo/v2/useGetWalletIfoData.ts"],"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","useERC20","useIfoV2Contract","useIfoAllowance","useRefresh","makeBatchRequest","getAddress","BIG_ZERO","useGetWalletIfoData","ifo","fastRefresh","state","setState","poolBasic","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","poolUnlimited","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","poolId","prevState","setIsClaimed","fetchIfoData","userInfo","amounts","methods","viewUserInfo","call","viewUserOfferingAndRefundingAmountsForPools"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport useRefresh from 'hooks/useRefresh'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const [userInfo, amounts] = await makeBatchRequest([\n      contract.methods.viewUserInfo(account, [0, 1]).call,\n      contract.methods.viewUserOfferingAndRefundingAmountsForPools(account, [0, 1]).call,\n    ])\n\n    setState((prevState) => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0]),\n        offeringAmountInToken: new BigNumber(amounts[0][0]),\n        refundingAmountInLP: new BigNumber(amounts[0][1]),\n        taxAmountInLP: new BigNumber(amounts[0][2]),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1]),\n        offeringAmountInToken: new BigNumber(amounts[1][0]),\n        refundingAmountInLP: new BigNumber(amounts[1][1]),\n        taxAmountInLP: new BigNumber(amounts[1][2]),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, contract])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}