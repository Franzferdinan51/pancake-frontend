{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/components/RoundCard/OpenRoundCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { BetPosition } from 'state/types';\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks';\nimport { markPositionAsEntered } from 'state/predictions';\nimport useToast from 'hooks/useToast';\nimport CardFlip from '../CardFlip';\nimport { formatBnb, getBnbAmount } from '../../helpers';\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport Card from './Card';\nimport CardHeader from './CardHeader';\nimport SetPositionCard from './SetPositionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OpenRoundCard = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier\n}) => {\n  _s();\n\n  const [state, setState] = useState({\n    isSettingPosition: false,\n    position: BetPosition.BULL\n  });\n  const {\n    t\n  } = useTranslation();\n  const interval = useGetIntervalBlocks();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    currentBlock\n  } = useBlock();\n  const {\n    isSettingPosition,\n    position\n  } = state;\n  const isBufferPhase = currentBlock >= round.startBlock + interval;\n  const positionDisplay = position === BetPosition.BULL ? 'UP' : 'DOWN';\n  const {\n    targetRef,\n    tooltipVisible,\n    tooltip\n  } = useTooltip( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      whiteSpace: 'nowrap'\n    },\n    children: `${formatBnb(betAmount)} BNB`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this), {\n    placement: 'top'\n  }); // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n\n  const estimatedLockBlock = round.startBlock + interval;\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false;\n    }\n\n    if (round.lockPrice !== null) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const canEnterPosition = getCanEnterPosition();\n\n  const handleBack = () => setState(prevState => ({ ...prevState,\n    isSettingPosition: false\n  }));\n\n  const handleSetPosition = newPosition => {\n    setState(prevState => ({ ...prevState,\n      isSettingPosition: true,\n      position: newPosition\n    }));\n  };\n\n  const togglePosition = () => {\n    setState(prevState => ({ ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL\n    }));\n  };\n\n  const handleSuccess = async (decimalValue, hash) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(markPositionAsEntered({\n      account,\n      roundId: round.id,\n      bet: {\n        hash,\n        round,\n        position,\n        amount: getBnbAmount(decimalValue).toNumber(),\n        claimed: false\n      }\n    }));\n    handleBack();\n    toastSuccess('Success!', t(`${positionDisplay} position entered`, {\n      position: positionDisplay\n    }));\n  };\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? /*#__PURE__*/_jsxDEV(ArrowUpIcon, {\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 44\n    }, this) : /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 83\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardFlip, {\n    isFlipped: isSettingPosition,\n    height: \"404px\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        status: \"next\",\n        epoch: round.epoch,\n        blockNumber: estimatedLockBlock,\n        icon: /*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          color: \"white\",\n          mr: \"4px\",\n          width: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this),\n        title: t('Next')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        p: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bullMultiplier,\n          hasEntered: hasEnteredUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n          isNext: canEnterPosition,\n          isLive: !canEnterPosition,\n          children: canEnterPosition ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(PrizePoolRow, {\n              totalAmount: round.totalAmount,\n              mb: \"8px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              width: \"100%\",\n              onClick: () => handleSetPosition(BetPosition.BULL),\n              mb: \"4px\",\n              disabled: !canEnterPosition || isBufferPhase,\n              children: t('Enter UP')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              width: \"100%\",\n              onClick: () => handleSetPosition(BetPosition.BEAR),\n              disabled: !canEnterPosition || isBufferPhase,\n              children: t('Enter DOWN')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: targetRef,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: true,\n                startIcon: getPositionEnteredIcon(),\n                width: \"100%\",\n                mb: \"8px\",\n                children: t('%position% Entered', {\n                  position: positionDisplay\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PrizePoolRow, {\n              totalAmount: round.totalAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), tooltipVisible && tooltip]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bearMultiplier,\n          betPosition: BetPosition.BEAR,\n          hasEntered: hasEnteredDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SetPositionCard, {\n      onBack: handleBack,\n      onSuccess: handleSuccess,\n      position: position,\n      togglePosition: togglePosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OpenRoundCard, \"dwSR1ibDz20GVZv2/F92vAhlL9w=\", false, function () {\n  return [useTranslation, useGetIntervalBlocks, useToast, useWeb3React, useAppDispatch, useBlock, useTooltip];\n});\n\n_c = OpenRoundCard;\nexport default OpenRoundCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenRoundCard\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/components/RoundCard/OpenRoundCard.tsx"],"names":["React","useState","useWeb3React","CardBody","PlayCircleOutlineIcon","Button","useTooltip","ArrowUpIcon","ArrowDownIcon","useTranslation","useAppDispatch","BetPosition","useBlock","useGetIntervalBlocks","markPositionAsEntered","useToast","CardFlip","formatBnb","getBnbAmount","RoundResultBox","PrizePoolRow","MultiplierArrow","Card","CardHeader","SetPositionCard","OpenRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","state","setState","isSettingPosition","position","BULL","t","interval","toastSuccess","account","dispatch","currentBlock","isBufferPhase","startBlock","positionDisplay","targetRef","tooltipVisible","tooltip","whiteSpace","placement","estimatedLockBlock","getCanEnterPosition","lockPrice","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","togglePosition","BEAR","handleSuccess","decimalValue","hash","roundId","id","bet","amount","toNumber","claimed","getPositionEnteredIcon","epoch","totalAmount"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? 'UP' : 'DOWN'\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      'Success!',\n      t(`${positionDisplay} position entered`, {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n"]},"metadata":{},"sourceType":"module"}