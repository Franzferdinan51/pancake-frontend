{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React from 'react';\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit';\nimport UnlockButton from 'components/UnlockButton';\nimport { useTranslation } from 'contexts/Localization';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { useGetApiPrice } from 'state/hooks';\nimport AprRow from './AprRow';\nimport { StyledCard, StyledCardInner } from './StyledCard';\nimport CardFooter from './CardFooter';\nimport StyledCardHeader from './StyledCardHeader';\nimport CardActions from './CardActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PoolCard = ({\n  pool,\n  account\n}) => {\n  _s();\n\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    isFinished,\n    userData\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const stakedBalance = (userData === null || userData === void 0 ? void 0 : userData.stakedBalance) ? new BigNumber(userData.stakedBalance) : BIG_ZERO;\n  const accountHasStakedBalance = stakedBalance.gt(0);\n  const stakingTokenPrice = useGetApiPrice(stakingToken.address ? getAddress(stakingToken.address) : '');\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    isFinished: isFinished && sousId !== 0,\n    ribbon: isFinished && /*#__PURE__*/_jsxDEV(CardRibbon, {\n      variantColor: \"textDisabled\",\n      text: `${t('Finished')}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 29\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(StyledCardInner, {\n      children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n        isStaking: accountHasStakedBalance,\n        earningTokenSymbol: earningToken.symbol,\n        stakingTokenSymbol: stakingToken.symbol,\n        isFinished: isFinished && sousId !== 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(AprRow, {\n          pool: pool,\n          stakingTokenPrice: stakingTokenPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"24px\",\n          flexDirection: \"column\",\n          children: account ? /*#__PURE__*/_jsxDEV(CardActions, {\n            pool: pool,\n            stakedBalance: stakedBalance,\n            stakingTokenPrice: stakingTokenPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              mb: \"10px\",\n              textTransform: \"uppercase\",\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              bold: true,\n              children: t('Start earning')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(UnlockButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n        pool: pool,\n        account: account\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoolCard, \"Ikn0KMKn0H3AyE7qxb/IJf28kL0=\", false, function () {\n  return [useTranslation, useGetApiPrice];\n});\n\n_c = PoolCard;\nexport default PoolCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoolCard\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/index.tsx"],"names":["BigNumber","React","CardBody","Flex","Text","CardRibbon","UnlockButton","useTranslation","getAddress","BIG_ZERO","useGetApiPrice","AprRow","StyledCard","StyledCardInner","CardFooter","StyledCardHeader","CardActions","PoolCard","pool","account","sousId","stakingToken","earningToken","isFinished","userData","t","stakedBalance","accountHasStakedBalance","gt","stakingTokenPrice","address","symbol"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport { CardBody, Flex, Text, CardRibbon } from '@pancakeswap/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useGetApiPrice } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from './AprRow'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\n\nconst PoolCard: React.FC<{ pool: Pool; account: string }> = ({ pool, account }) => {\n  const { sousId, stakingToken, earningToken, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const accountHasStakedBalance = stakedBalance.gt(0)\n  const stakingTokenPrice = useGetApiPrice(stakingToken.address ? getAddress(stakingToken.address) : '')\n\n  return (\n    <StyledCard\n      isFinished={isFinished && sousId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={`${t('Finished')}`} />}\n    >\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasStakedBalance}\n          earningTokenSymbol={earningToken.symbol}\n          stakingTokenSymbol={stakingToken.symbol}\n          isFinished={isFinished && sousId !== 0}\n        />\n        <CardBody>\n          <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} />\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <CardActions pool={pool} stakedBalance={stakedBalance} stakingTokenPrice={stakingTokenPrice} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default PoolCard\n"]},"metadata":{},"sourceType":"module"}