{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/TradingCompetition/components/RegisterModal/RegisterWithProfile.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { Button, Heading, Text, Flex, Checkbox, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTradingCompetitionContract } from 'hooks/useContract';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCheckbox = styled(Checkbox)`\n  min-width: 24px;\n`;\n_c = StyledCheckbox;\nconst StyledLabel = styled.label`\n  cursor: pointer;\n`;\n_c2 = StyledLabel;\n\nconst RegisterWithProfile = ({\n  profile,\n  onDismiss,\n  onRegisterSuccess\n}) => {\n  _s();\n\n  const [isAcknowledged, setIsAcknowledged] = useState(false);\n  const [isConfirming, setIsConfirming] = useState(false);\n  const tradingCompetitionContract = useTradingCompetitionContract();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    t\n  } = useTranslation();\n\n  const handleConfirmClick = () => {\n    tradingCompetitionContract.methods.register().send({\n      from: account\n    }).on('sending', () => {\n      setIsConfirming(true);\n    }).on('receipt', async () => {\n      toastSuccess('You have registered for the competition!');\n      onDismiss();\n      onRegisterSuccess();\n    }).on('error', error => {\n      toastError('Error', error === null || error === void 0 ? void 0 : error.message);\n      setIsConfirming(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"md\",\n      mb: \"24px\",\n      children: `@${profile.username}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: t('Registering for the competition will make your wallet address publicly visible on the leaderboard.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"14px\",\n        color: \"textSubtle\",\n        mb: \"24px\",\n        children: t('This decision cannot be reversed.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledLabel, {\n        htmlFor: \"acknowledgement\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(StyledCheckbox, {\n            id: \"acknowledgement\",\n            checked: isAcknowledged,\n            onChange: () => setIsAcknowledged(!isAcknowledged),\n            scale: \"sm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: \"16px\",\n            children: t('I understand that my address may be displayed publicly throughout the competition.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"24px\",\n      width: \"100%\",\n      onClick: handleConfirmClick,\n      disabled: !isAcknowledged || isConfirming,\n      isLoading: isConfirming,\n      endIcon: isConfirming ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }, this) : null,\n      children: t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RegisterWithProfile, \"slj1PRBCkIMbCFelVu+FF1u3V6Q=\", false, function () {\n  return [useTradingCompetitionContract, useWeb3React, useToast, useTranslation];\n});\n\n_c3 = RegisterWithProfile;\nexport default RegisterWithProfile;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCheckbox\");\n$RefreshReg$(_c2, \"StyledLabel\");\n$RefreshReg$(_c3, \"RegisterWithProfile\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/TradingCompetition/components/RegisterModal/RegisterWithProfile.tsx"],"names":["React","useState","useWeb3React","styled","Button","Heading","Text","Flex","Checkbox","AutoRenewIcon","useTradingCompetitionContract","useTranslation","useToast","StyledCheckbox","StyledLabel","label","RegisterWithProfile","profile","onDismiss","onRegisterSuccess","isAcknowledged","setIsAcknowledged","isConfirming","setIsConfirming","tradingCompetitionContract","account","toastSuccess","toastError","t","handleConfirmClick","methods","register","send","from","on","error","message","username"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Button, Heading, Text, Flex, Checkbox, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTradingCompetitionContract } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { CompetitionProps } from '../../types'\n\nconst StyledCheckbox = styled(Checkbox)`\n  min-width: 24px;\n`\n\nconst StyledLabel = styled.label`\n  cursor: pointer;\n`\n\nconst RegisterWithProfile: React.FC<CompetitionProps> = ({ profile, onDismiss, onRegisterSuccess }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const tradingCompetitionContract = useTradingCompetitionContract()\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n\n  const handleConfirmClick = () => {\n    tradingCompetitionContract.methods\n      .register()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', async () => {\n        toastSuccess('You have registered for the competition!')\n        onDismiss()\n        onRegisterSuccess()\n      })\n      .on('error', (error) => {\n        toastError('Error', error?.message)\n        setIsConfirming(false)\n      })\n  }\n\n  return (\n    <>\n      <Heading scale=\"md\" mb=\"24px\">{`@${profile.username}`}</Heading>\n      <Flex flexDirection=\"column\">\n        <Text bold>\n          {t('Registering for the competition will make your wallet address publicly visible on the leaderboard.')}\n        </Text>\n        <Text fontSize=\"14px\" color=\"textSubtle\" mb=\"24px\">\n          {t('This decision cannot be reversed.')}\n        </Text>\n        <StyledLabel htmlFor=\"acknowledgement\">\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <StyledCheckbox\n              id=\"acknowledgement\"\n              checked={isAcknowledged}\n              onChange={() => setIsAcknowledged(!isAcknowledged)}\n              scale=\"sm\"\n            />\n            <Text ml=\"16px\">\n              {t('I understand that my address may be displayed publicly throughout the competition.')}\n            </Text>\n          </Flex>\n        </StyledLabel>\n      </Flex>\n      <Button\n        mt=\"24px\"\n        width=\"100%\"\n        onClick={handleConfirmClick}\n        disabled={!isAcknowledged || isConfirming}\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {t('Confirm')}\n      </Button>\n    </>\n  )\n}\n\nexport default RegisterWithProfile\n"]},"metadata":{},"sourceType":"module"}