{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport useWeb3 from './useWeb3';\nimport useRefresh from './useRefresh';\nimport useLastUpdated from './useLastUpdated';\n\nconst useTokenBalance = tokenAddress => {\n  _s();\n\n  const [balance, setBalance] = useState(BIG_ZERO);\n  const {\n    account\n  } = useWeb3React();\n  const web3 = useWeb3();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3);\n      const res = await contract.methods.balanceOf(account).call();\n      setBalance(new BigNumber(res));\n    };\n\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, tokenAddress, web3, fastRefresh]);\n  return balance;\n};\n\n_s(useTokenBalance, \"iEIs7EBQ0xjZQBHR5iPktwWoc8U=\", false, function () {\n  return [useWeb3React, useWeb3, useRefresh];\n});\n\nexport const useTotalSupply = () => {\n  _s2();\n\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract();\n      const supply = await cakeContract.methods.totalSupply().call();\n      setTotalSupply(new BigNumber(supply));\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useBurnedBalance = tokenAddress => {\n  _s3();\n\n  const [balance, setBalance] = useState(BIG_ZERO);\n  const {\n    slowRefresh\n  } = useRefresh();\n  const web3 = useWeb3();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3);\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call();\n      setBalance(new BigNumber(res));\n    };\n\n    fetchBalance();\n  }, [web3, tokenAddress, slowRefresh]);\n  return balance;\n};\n\n_s3(useBurnedBalance, \"AuZR4BdbXApTPXALksnWT19tgw4=\", false, function () {\n  return [useRefresh, useWeb3];\n});\n\nexport const useGetBnbBalance = () => {\n  _s4();\n\n  const [balance, setBalance] = useState(BIG_ZERO);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  const web3 = useWeb3();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account);\n      setBalance(new BigNumber(walletBalance));\n    };\n\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, web3, lastUpdated, setBalance]);\n  return {\n    balance,\n    refresh: setLastUpdated\n  };\n};\n\n_s4(useGetBnbBalance, \"Pb74bu/q3ioJAGTzrMFhLztpvkk=\", false, function () {\n  return [useWeb3React, useLastUpdated, useWeb3];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWeb3React","getBep20Contract","getCakeContract","BIG_ZERO","useWeb3","useRefresh","useLastUpdated","useTokenBalance","tokenAddress","balance","setBalance","account","web3","fastRefresh","fetchBalance","contract","res","methods","balanceOf","call","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","useBurnedBalance","useGetBnbBalance","lastUpdated","setLastUpdated","walletBalance","eth","getBalance","refresh"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,uBAAlD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,eAAe,GAAIC,YAAD,IAA0B;AAAA;;AAChD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACK,QAAD,CAAtC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMY,IAAI,GAAGR,OAAO,EAApB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAkBR,UAAU,EAAlC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,YAAY,GAAG,YAAY;AAC/B,YAAMC,QAAQ,GAAGd,gBAAgB,CAACO,YAAD,EAAeI,IAAf,CAAjC;AACA,YAAMI,GAAG,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiBC,SAAjB,CAA2BP,OAA3B,EAAoCQ,IAApC,EAAlB;AACAT,MAAAA,UAAU,CAAC,IAAIX,SAAJ,CAAciB,GAAd,CAAD,CAAV;AACD,KAJD;;AAMA,QAAIL,OAAJ,EAAa;AACXG,MAAAA,YAAY;AACb;AACF,GAVQ,EAUN,CAACH,OAAD,EAAUH,YAAV,EAAwBI,IAAxB,EAA8BC,WAA9B,CAVM,CAAT;AAYA,SAAOJ,OAAP;AACD,CAnBD;;GAAMF,e;UAEgBP,Y,EACPI,O,EACWC,U;;;AAiB1B,OAAO,MAAMe,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAkBhB,UAAU,EAAlC;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,EAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAe2B,gBAAf,GAAkC;AAChC,YAAMC,YAAY,GAAGvB,eAAe,EAApC;AACA,YAAMwB,MAAM,GAAG,MAAMD,YAAY,CAACR,OAAb,CAAqBK,WAArB,GAAmCH,IAAnC,EAArB;AACAI,MAAAA,cAAc,CAAC,IAAIxB,SAAJ,CAAc2B,MAAd,CAAD,CAAd;AACD;;AAEDF,IAAAA,gBAAgB;AACjB,GARQ,EAQN,CAACH,WAAD,CARM,CAAT;AAUA,SAAOC,WAAP;AACD,CAfM;;IAAMF,c;UACaf,U;;;AAgB1B,OAAO,MAAMsB,gBAAgB,GAAInB,YAAD,IAA0B;AAAA;;AACxD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACK,QAAD,CAAtC;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAkBhB,UAAU,EAAlC;AACA,QAAMO,IAAI,GAAGR,OAAO,EAApB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,YAAY,GAAG,YAAY;AAC/B,YAAMC,QAAQ,GAAGd,gBAAgB,CAACO,YAAD,EAAeI,IAAf,CAAjC;AACA,YAAMI,GAAG,GAAG,MAAMD,QAAQ,CAACE,OAAT,CAAiBC,SAAjB,CAA2B,4CAA3B,EAAyEC,IAAzE,EAAlB;AACAT,MAAAA,UAAU,CAAC,IAAIX,SAAJ,CAAciB,GAAd,CAAD,CAAV;AACD,KAJD;;AAMAF,IAAAA,YAAY;AACb,GARQ,EAQN,CAACF,IAAD,EAAOJ,YAAP,EAAqBa,WAArB,CARM,CAAT;AAUA,SAAOZ,OAAP;AACD,CAhBM;;IAAMkB,gB;UAEatB,U,EACXD,O;;;AAef,OAAO,MAAMwB,gBAAgB,GAAG,MAAM;AAAA;;AACpC,QAAM,CAACnB,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACK,QAAD,CAAtC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAM;AAAE6B,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCxB,cAAc,EAAtD;AACA,QAAMM,IAAI,GAAGR,OAAO,EAApB;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,YAAY,GAAG,YAAY;AAC/B,YAAMiB,aAAa,GAAG,MAAMnB,IAAI,CAACoB,GAAL,CAASC,UAAT,CAAoBtB,OAApB,CAA5B;AACAD,MAAAA,UAAU,CAAC,IAAIX,SAAJ,CAAcgC,aAAd,CAAD,CAAV;AACD,KAHD;;AAKA,QAAIpB,OAAJ,EAAa;AACXG,MAAAA,YAAY;AACb;AACF,GATQ,EASN,CAACH,OAAD,EAAUC,IAAV,EAAgBiB,WAAhB,EAA6BnB,UAA7B,CATM,CAAT;AAWA,SAAO;AAAED,IAAAA,OAAF;AAAWyB,IAAAA,OAAO,EAAEJ;AAApB,GAAP;AACD,CAlBM;;IAAMF,gB;UAES5B,Y,EACoBM,c,EAC3BF,O;;;AAgBf,eAAeG,eAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n"]},"metadata":{},"sourceType":"module"}