{"ast":null,"code":"/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js';\nimport { Interface } from '@ethersproject/abi';\nimport { getWeb3NoAccount } from 'utils/web3';\nimport MultiCallAbi from 'config/abi/Multicall.json';\nimport ticketAbi from 'config/abi/lotteryNft.json';\nimport lotteryAbi from 'config/abi/lottery.json';\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config';\nimport { getMulticallAddress } from './addressHelpers';\nimport { BIG_ZERO } from './bigNumber';\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount();\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress());\n  const itf = new Interface(abi);\n  let res = [];\n\n  if (calls.length > 100) {\n    let i = 0;\n\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1));\n      const calldata = newCalls.map(call => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])]);\n      const {\n        returnData\n      } = await multi.methods.aggregate(calldata).call();\n      i++;\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)));\n    }\n  } else {\n    const calldata = calls.map(call => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])]);\n    const {\n      returnData\n    } = await multi.methods.aggregate(calldata).call();\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call));\n  }\n\n  return res;\n};\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods.multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList).send({\n      from: account\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call());\n  const length = await getTicketsAmount(ticketsContract, account); // eslint-disable-next-line prefer-spread\n\n  const calls1 = Array.apply(null, {\n    length\n  }).map((a, i) => [ticketsContract.options.address, 'tokenOfOwnerByIndex', [account, i]]);\n  const res = await multiCall(ticketAbi, calls1);\n  const tokenIds = res.map(id => id.toString());\n  const calls2 = tokenIds.map(id => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]]);\n  const ticketIssues = await multiCall(ticketAbi, calls2);\n  const finalTokenids = [];\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i]);\n    }\n  });\n  const calls3 = finalTokenids.map(id => [ticketsContract.options.address, 'getLotteryNumbers', [id]]);\n  const tickets = await multiCall(ticketAbi, calls3);\n  await getLotteryStatus(lotteryContract);\n  return tickets;\n};\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call();\n};\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call();\n  const length = await getTicketsAmount(ticketsContract, account); // eslint-disable-next-line prefer-spread\n\n  const calls1 = Array.apply(null, {\n    length\n  }).map((a, i) => [ticketsContract.options.address, 'tokenOfOwnerByIndex', [account, i]]);\n  const res = await multiCall(ticketAbi, calls1);\n  const tokenIds = res.map(id => id.toString());\n  const calls2 = tokenIds.map(id => [ticketsContract.options.address, 'getClaimStatus', [id]]);\n  const claimedStatus = await multiCall(ticketAbi, calls2);\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0]);\n  const calls3 = unClaimedIds.map(id => [lotteryContract.options.address, 'getRewardView', [id]]);\n  const rewards = await multiCall(lotteryAbi, calls3);\n  let finalTokenIds = [];\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i]);\n    }\n  });\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200);\n  }\n\n  try {\n    return lotteryContract.methods.multiClaim(finalTokenIds).send({\n      from: account\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call();\n    const length = await getTicketsAmount(ticketsContract, account); // eslint-disable-next-line prefer-spread\n\n    const calls1 = Array.apply(null, {\n      length\n    }).map((a, i) => [ticketsContract.options.address, 'tokenOfOwnerByIndex', [account, i]]);\n    const res = await multiCall(ticketAbi, calls1);\n    const tokenIds = res.map(id => id.toString());\n    const calls2 = tokenIds.map(id => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]]);\n    const ticketIssues = await multiCall(ticketAbi, calls2);\n    const calls3 = tokenIds.map(id => [ticketsContract.options.address, 'getClaimStatus', [id]]);\n    const claimedStatus = await multiCall(ticketAbi, calls3);\n    const drawed = await getLotteryStatus(lotteryContract);\n    const finalTokenIds = [];\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {} else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i]);\n      }\n    });\n    const calls4 = finalTokenIds.map(id => [lotteryContract.options.address, 'getRewardView', [id]]);\n    const rewards = await multiCall(lotteryAbi, calls4);\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO);\n    return claim;\n  } catch (err) {\n    console.error(err);\n  }\n\n  return BIG_ZERO;\n};\nexport const getTotalRewards = async lotteryContract => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call();\n  return lotteryContract.methods.getTotalRewards(issueIndex).call();\n};\nexport const getMax = async lotteryContract => {\n  return lotteryContract.methods.maxNumber().call();\n};\nexport const getLotteryIssueIndex = async lotteryContract => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call();\n  return issueIndex;\n};\nexport const getLotteryStatus = async lotteryContract => {\n  return lotteryContract.methods.drawed().call();\n};\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call();\n  const drawed = await lotteryContract.methods.drawed().call();\n\n  if (!drawed) {\n    issueIndex -= 1;\n  }\n\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call();\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber();\n  } catch (err) {\n    console.error(err);\n  }\n\n  return 0;\n};\nexport const getWinningNumbers = async lotteryContract => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call();\n  const numbers = [];\n  const drawed = await lotteryContract.methods.drawed().call();\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0];\n  }\n\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString());\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString());\n    }\n  }\n\n  return numbers;\n};","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/utils/lotteryUtils.ts"],"names":["BigNumber","Interface","getWeb3NoAccount","MultiCallAbi","ticketAbi","lotteryAbi","DEFAULT_TOKEN_DECIMAL","LOTTERY_TICKET_PRICE","getMulticallAddress","BIG_ZERO","multiCall","abi","calls","web3","multi","eth","Contract","itf","res","length","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","returnData","methods","aggregate","concat","index","decodeFunctionResult","multiBuy","lotteryContract","price","numbersList","account","times","toString","send","from","on","tx","transactionHash","err","console","error","getTickets","ticketsContract","customLotteryNum","issueIndex","getTicketsAmount","calls1","Array","apply","a","options","address","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","tickets","getLotteryStatus","balanceOf","multiClaim","claimedStatus","unClaimedIds","filter","rewards","finalTokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","amount","historyAmount","div","toNumber","getWinningNumbers","numbers","parseInt","historyNumbers","winningNumbers"],"mappings":"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","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { getMulticallAddress } from './addressHelpers'\nimport { BIG_ZERO } from './bigNumber'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount()\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finalTokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BIG_ZERO\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\n\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n"]},"metadata":{},"sourceType":"module"}