{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport farmsConfig from 'config/constants/farms';\nimport isArchivedPid from 'utils/farmHelpers';\nimport fetchFarms from './fetchFarms';\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from './fetchFarmUser';\nconst nonArchivedFarms = farmsConfig.filter(({\n  pid\n}) => !isArchivedPid(pid));\nconst noAccountFarmConfig = farmsConfig.map(farm => ({ ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0'\n  }\n}));\nconst initialState = {\n  data: noAccountFarmConfig,\n  loadArchivedFarmsData: false,\n  userDataLoaded: false\n};\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData = action.payload;\n      state.data = state.data.map(farm => {\n        const liveFarmData = liveFarmsData.find(f => f.pid === farm.pid);\n        return { ...farm,\n          ...liveFarmData\n        };\n      });\n    },\n    setFarmUserData: (state, action) => {\n      const {\n        arrayOfUserDataObjects\n      } = action.payload;\n      arrayOfUserDataObjects.forEach(userDataEl => {\n        const {\n          pid\n        } = userDataEl;\n        const index = state.data.findIndex(farm => farm.pid === pid);\n        state.data[index] = { ...state.data[index],\n          userData: userDataEl\n        };\n      });\n      state.userDataLoaded = true;\n    },\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload;\n      state.loadArchivedFarmsData = loadArchivedFarmsData;\n    }\n  }\n}); // Actions\n\nexport const {\n  setFarmsPublicData,\n  setFarmUserData,\n  setLoadArchivedFarmsData\n} = farmsSlice.actions; // Thunks\n\nexport const fetchFarmsPublicDataAsync = () => async (dispatch, getState) => {\n  const fetchArchived = getState().farms.loadArchivedFarmsData;\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms;\n  const farms = await fetchFarms(farmsToFetch);\n  dispatch(setFarmsPublicData(farms));\n};\nexport const fetchFarmUserDataAsync = account => async (dispatch, getState) => {\n  const fetchArchived = getState().farms.loadArchivedFarmsData;\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms;\n  const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch);\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch);\n  const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch);\n  const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch);\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      pid: farmsToFetch[index].pid,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index]\n    };\n  });\n  dispatch(setFarmUserData({\n    arrayOfUserDataObjects\n  }));\n};\nexport default farmsSlice.reducer;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/state/farms/index.ts"],"names":["createSlice","farmsConfig","isArchivedPid","fetchFarms","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","nonArchivedFarms","filter","pid","noAccountFarmConfig","map","farm","userData","allowance","tokenBalance","stakedBalance","earnings","initialState","data","loadArchivedFarmsData","userDataLoaded","farmsSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","findIndex","setLoadArchivedFarmsData","actions","fetchFarmsPublicDataAsync","dispatch","getState","fetchArchived","farms","farmsToFetch","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport isArchivedPid from 'utils/farmHelpers'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\n\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\n  ...farm,\n  userData: {\n    allowance: '0',\n    tokenBalance: '0',\n    stakedBalance: '0',\n    earnings: '0',\n  },\n}))\n\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { pid } = userDataEl\n        const index = state.data.findIndex((farm) => farm.pid === pid)\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n      state.userDataLoaded = true\n    },\n    setLoadArchivedFarmsData: (state, action) => {\n      const loadArchivedFarmsData = action.payload\n      state.loadArchivedFarmsData = loadArchivedFarmsData\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData, setLoadArchivedFarmsData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch, getState) => {\n  const fetchArchived = getState().farms.loadArchivedFarmsData\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms\n  const farms = await fetchFarms(farmsToFetch)\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account: string) => async (dispatch, getState) => {\n  const fetchArchived = getState().farms.loadArchivedFarmsData\n  const farmsToFetch = fetchArchived ? farmsConfig : nonArchivedFarms\n  const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\n  const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      pid: farmsToFetch[index].pid,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}