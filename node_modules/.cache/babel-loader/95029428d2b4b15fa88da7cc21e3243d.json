{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { getWeb3NoAccount } from 'utils/web3';\n/**\n * Returns a countdown in seconds of a given block\n */\n\nconst useBlockCountdown = blockNumber => {\n  _s();\n\n  const timer = useRef(null);\n  const [secondsRemaining, setSecondsRemaining] = useState(0);\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount();\n      const currentBlock = await web3.eth.getBlockNumber();\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME); // Clear previous interval\n\n        if (timer.current) {\n          clearInterval(timer.current);\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining(prevSecondsRemaining => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current);\n            }\n\n            return prevSecondsRemaining - 1;\n          });\n        }, 1000);\n      }\n    };\n\n    startCountdown();\n    return () => {\n      clearInterval(timer.current);\n    };\n  }, [setSecondsRemaining, blockNumber, timer]);\n  return secondsRemaining;\n};\n\n_s(useBlockCountdown, \"L/8B19HXGe7mB9ThV0OJov/Kjlw=\");\n\nexport default useBlockCountdown;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/hooks/useGetBlockCountdown.ts"],"names":["useEffect","useRef","useState","BSC_BLOCK_TIME","getWeb3NoAccount","useBlockCountdown","blockNumber","timer","secondsRemaining","setSecondsRemaining","startCountdown","web3","currentBlock","eth","getBlockNumber","current","clearInterval","setInterval","prevSecondsRemaining"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,gBAAT,QAAiC,YAAjC;AAEA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAIC,WAAD,IAAyB;AAAA;;AACjD,QAAMC,KAAK,GAAGN,MAAM,CAAgC,IAAhC,CAApB;AACA,QAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,CAAD,CAAxD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,cAAc,GAAG,YAAY;AACjC,YAAMC,IAAI,GAAGP,gBAAgB,EAA7B;AACA,YAAMQ,YAAY,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,cAAT,EAA3B;;AAEA,UAAIR,WAAW,GAAGM,YAAlB,EAAgC;AAC9BH,QAAAA,mBAAmB,CAAC,CAACH,WAAW,GAAGM,YAAf,IAA+BT,cAAhC,CAAnB,CAD8B,CAG9B;;AACA,YAAII,KAAK,CAACQ,OAAV,EAAmB;AACjBC,UAAAA,aAAa,CAACT,KAAK,CAACQ,OAAP,CAAb;AACD;;AAEDR,QAAAA,KAAK,CAACQ,OAAN,GAAgBE,WAAW,CAAC,MAAM;AAChCR,UAAAA,mBAAmB,CAAES,oBAAD,IAA0B;AAC5C,gBAAIA,oBAAoB,KAAK,CAA7B,EAAgC;AAC9BF,cAAAA,aAAa,CAACT,KAAK,CAACQ,OAAP,CAAb;AACD;;AAED,mBAAOG,oBAAoB,GAAG,CAA9B;AACD,WANkB,CAAnB;AAOD,SAR0B,EAQxB,IARwB,CAA3B;AASD;AACF,KAtBD;;AAwBAR,IAAAA,cAAc;AAEd,WAAO,MAAM;AACXM,MAAAA,aAAa,CAACT,KAAK,CAACQ,OAAP,CAAb;AACD,KAFD;AAGD,GA9BQ,EA8BN,CAACN,mBAAD,EAAsBH,WAAtB,EAAmCC,KAAnC,CA9BM,CAAT;AAgCA,SAAOC,gBAAP;AACD,CArCD;;GAAMH,iB;;AAuCN,eAAeA,iBAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n"]},"metadata":{},"sourceType":"module"}