{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Box, CardBody, Flex, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport UnlockButton from 'components/UnlockButton';\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks';\nimport AprRow from '../PoolCard/AprRow';\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard';\nimport CardFooter from '../PoolCard/CardFooter';\nimport StyledCardHeader from '../PoolCard/StyledCardHeader';\nimport VaultCardActions from './VaultCardActions';\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow';\nimport RecentCakeProfitRow from './RecentCakeProfitRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCardBody = styled(CardBody)`\n  min-height: ${({\n  isLoading\n}) => isLoading ? '0' : '254px'};\n`;\n_c = StyledCardBody;\n\nconst CakeVaultCard = ({\n  pool,\n  showStakedOnly\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    userData: {\n      userShares,\n      isLoading: isVaultUserDataLoading\n    },\n    fees: {\n      performanceFee\n    }\n  } = useCakeVault(); //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n\n  const timesCompoundedDaily = 288;\n  const accountHasSharesStaked = userShares && userShares.gt(0);\n  const cakePriceBusd = usePriceCakeBusd();\n  const isLoading = !pool.userData || isVaultUserDataLoading;\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    isPromotedPool: true,\n    children: /*#__PURE__*/_jsxDEV(StyledCardInner, {\n      isPromotedPool: true,\n      children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n        isPromotedPool: true,\n        isStaking: accountHasSharesStaked,\n        isAutoVault: true,\n        earningTokenSymbol: \"CAKE\",\n        stakingTokenSymbol: \"CAKE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledCardBody, {\n        isLoading: isLoading,\n        children: [/*#__PURE__*/_jsxDEV(AprRow, {\n          pool: pool,\n          stakingTokenPrice: cakePriceBusd.toNumber(),\n          isAutoVault: true,\n          compoundFrequency: timesCompoundedDaily,\n          performanceFee: performanceFeeAsDecimal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: \"24px\",\n          children: /*#__PURE__*/_jsxDEV(RecentCakeProfitRow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: \"8px\",\n          children: /*#__PURE__*/_jsxDEV(UnstakingFeeCountdownRow, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"24px\",\n          flexDirection: \"column\",\n          children: account ? /*#__PURE__*/_jsxDEV(VaultCardActions, {\n            pool: pool,\n            accountHasSharesStaked: accountHasSharesStaked,\n            isLoading: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              mb: \"10px\",\n              textTransform: \"uppercase\",\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              bold: true,\n              children: t('Start earning')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(UnlockButton, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n        pool: pool,\n        account: account,\n        isAutoVault: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CakeVaultCard, \"8MsZF28bSQQUetNkM7HPIEZjCTI=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault, usePriceCakeBusd];\n});\n\n_c2 = CakeVaultCard;\nexport default CakeVaultCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCardBody\");\n$RefreshReg$(_c2, \"CakeVaultCard\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/index.tsx"],"names":["React","styled","Box","CardBody","Flex","Text","useTranslation","useWeb3React","UnlockButton","useCakeVault","usePriceCakeBusd","AprRow","StyledCard","StyledCardInner","CardFooter","StyledCardHeader","VaultCardActions","UnstakingFeeCountdownRow","RecentCakeProfitRow","StyledCardBody","isLoading","CakeVaultCard","pool","showStakedOnly","t","account","userData","userShares","isVaultUserDataLoading","fees","performanceFee","timesCompoundedDaily","accountHasSharesStaked","gt","cakePriceBusd","performanceFeeAsDecimal","toNumber"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard, StyledCardInner } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: Pool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n  } = useCakeVault()\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const timesCompoundedDaily = 288\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isPromotedPool>\n      <StyledCardInner isPromotedPool>\n        <StyledCardHeader\n          isPromotedPool\n          isStaking={accountHasSharesStaked}\n          isAutoVault\n          earningTokenSymbol=\"CAKE\"\n          stakingTokenSymbol=\"CAKE\"\n        />\n        <StyledCardBody isLoading={isLoading}>\n          <AprRow\n            pool={pool}\n            stakingTokenPrice={cakePriceBusd.toNumber()}\n            isAutoVault\n            compoundFrequency={timesCompoundedDaily}\n            performanceFee={performanceFeeAsDecimal}\n          />\n          <Box mt=\"24px\">\n            <RecentCakeProfitRow />\n          </Box>\n          <Box mt=\"8px\">\n            <UnstakingFeeCountdownRow />\n          </Box>\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <VaultCardActions pool={pool} accountHasSharesStaked={accountHasSharesStaked} isLoading={isLoading} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </StyledCardBody>\n        <CardFooter pool={pool} account={account} isAutoVault />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n"]},"metadata":{},"sourceType":"module"}