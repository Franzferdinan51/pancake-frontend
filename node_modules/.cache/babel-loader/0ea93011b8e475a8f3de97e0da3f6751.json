{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/components/History/HistoricalBet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Box, ChevronDownIcon, ChevronUpIcon, Flex, IconButton, PlayCircleOutlineIcon, Text, WaitIcon } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { PredictionStatus } from 'state/types';\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks';\nimport { getRoundResult, Result } from 'state/predictions/helpers';\nimport { useTranslation } from 'contexts/Localization';\nimport { formatBnb, getPayout } from '../../helpers';\nimport CollectWinningsButton from '../CollectWinningsButton';\nimport ReclaimPositionButton from '../ReclaimPositionButton';\nimport BetDetails from './BetDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledBet = styled(Flex).attrs({\n  alignItems: 'center',\n  p: '16px'\n})`\n  background-color: ${({\n  theme\n}) => theme.card.background};\n  border-bottom: 2px solid ${({\n  theme\n}) => theme.colors.borderColor};\n  cursor: pointer;\n`;\n_c = StyledBet;\nconst YourResult = styled(Box)`\n  flex: 1;\n`;\n_c2 = YourResult;\n\nconst HistoricalBet = ({\n  bet\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    amount,\n    round\n  } = bet;\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const currentEpoch = useGetCurrentEpoch();\n  const status = useGetPredictionsStatus();\n\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  const getRoundColor = result => {\n    switch (result) {\n      case Result.WIN:\n        return 'success';\n\n      case Result.LOSE:\n        return 'failure';\n\n      case Result.CANCELED:\n        return 'textDisabled';\n\n      default:\n        return 'text';\n    }\n  };\n\n  const getRoundPrefix = result => {\n    if (result === Result.LOSE) {\n      return '-';\n    }\n\n    if (result === Result.WIN) {\n      return '+';\n    }\n\n    return '';\n  };\n\n  const roundResult = getRoundResult(bet, currentEpoch);\n  const resultTextColor = getRoundColor(roundResult);\n  const resultTextPrefix = getRoundPrefix(roundResult);\n  const isOpenRound = round.epoch === currentEpoch;\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1;\n  const canClaim = useBetCanClaim(account, bet.round.id); // Winners get the payout, otherwise the claim what they put it if it was canceled\n\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount;\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(WaitIcon, {\n          color: \"primary\",\n          mr: \"6px\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"primary\",\n          bold: true,\n          children: t('Starting Soon')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (isLiveRound) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          color: \"secondary\",\n          mr: \"6px\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"secondary\",\n          bold: true,\n          children: t('Live Now')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: t('Your Result')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        color: resultTextColor,\n        lineHeight: 1,\n        children: roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledBet, {\n      onClick: toggleOpen,\n      role: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: \"48px\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: t('Round')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            lineHeight: 1,\n            children: round.epoch.toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YourResult, {\n        px: \"24px\",\n        children: renderBetLabel()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), roundResult === Result.WIN && canClaim && /*#__PURE__*/_jsxDEV(CollectWinningsButton, {\n        hasClaimed: !canClaim,\n        roundId: bet.round.id,\n        epoch: bet.round.epoch,\n        payout: payout,\n        scale: \"sm\",\n        mr: \"8px\",\n        children: t('Collect')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), roundResult === Result.CANCELED && canClaim && /*#__PURE__*/_jsxDEV(ReclaimPositionButton, {\n        epoch: bet.round.epoch,\n        scale: \"sm\",\n        mr: \"8px\",\n        children: t('Reclaim')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), !isOpenRound && !isLiveRound && /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        scale: \"sm\",\n        children: isOpen ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(BetDetails, {\n      bet: bet,\n      result: getRoundResult(bet, currentEpoch)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HistoricalBet, \"RC9gjt+p+aOebYAWkhChRRjGxkA=\", false, function () {\n  return [useTranslation, useWeb3React, useGetCurrentEpoch, useGetPredictionsStatus, useBetCanClaim];\n});\n\n_c3 = HistoricalBet;\nexport default HistoricalBet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledBet\");\n$RefreshReg$(_c2, \"YourResult\");\n$RefreshReg$(_c3, \"HistoricalBet\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Predictions/components/History/HistoricalBet.tsx"],"names":["React","useState","useWeb3React","Box","ChevronDownIcon","ChevronUpIcon","Flex","IconButton","PlayCircleOutlineIcon","Text","WaitIcon","styled","PredictionStatus","useBetCanClaim","useGetCurrentEpoch","useGetPredictionsStatus","getRoundResult","Result","useTranslation","formatBnb","getPayout","CollectWinningsButton","ReclaimPositionButton","BetDetails","StyledBet","attrs","alignItems","p","theme","card","background","colors","borderColor","YourResult","HistoricalBet","bet","isOpen","setIsOpen","amount","round","t","account","currentEpoch","status","toggleOpen","getRoundColor","result","WIN","LOSE","CANCELED","getRoundPrefix","roundResult","resultTextColor","resultTextPrefix","isOpenRound","epoch","isLiveRound","LIVE","canClaim","id","payout","renderBetLabel","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n"]},"metadata":{},"sourceType":"module"}