{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\n\nconst fetchFarms = async farmsToFetch => {\n  const data = await Promise.all(farmsToFetch.map(async farmConfig => {\n    const lpAddress = getAddress(farmConfig.lpAddresses);\n    const calls = [// Balance of token in the LP contract\n    {\n      address: getAddress(farmConfig.token.address),\n      name: 'balanceOf',\n      params: [lpAddress]\n    }, // Balance of quote token on LP contract\n    {\n      address: getAddress(farmConfig.quoteToken.address),\n      name: 'balanceOf',\n      params: [lpAddress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: getAddress(farmConfig.token.address),\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: getAddress(farmConfig.quoteToken.address),\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls); // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n    const lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP).div(DEFAULT_TOKEN_DECIMAL).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n    const tokenAmount = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals)).times(lpTokenRatio);\n    const quoteTokenAmount = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals)).times(lpTokenRatio);\n    const [info, totalAllocPoint] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      quoteTokenAmount: quoteTokenAmount.toJSON(),\n      lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\n      poolWeight: poolWeight.toJSON(),\n      multiplier: `${allocPoint.div(100).toString()}X`\n    };\n  }));\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","BIG_TEN","getAddress","getMasterChefAddress","DEFAULT_TOKEN_DECIMAL","fetchFarms","farmsToFetch","data","Promise","all","map","farmConfig","lpAddress","lpAddresses","calls","address","token","name","params","quoteToken","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","lpTotalInQuoteToken","times","tokenAmount","pow","quoteTokenAmount","info","totalAllocPoint","pid","allocPoint","_hex","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { FarmConfig } from 'config/constants/types'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\n\nconst fetchFarms = async (farmsToFetch: FarmConfig[]) => {\n  const data = await Promise.all(\n    farmsToFetch.map(async (farmConfig) => {\n      const lpAddress = getAddress(farmConfig.lpAddresses)\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: getAddress(farmConfig.token.address),\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: getAddress(farmConfig.quoteToken.address),\n          name: 'balanceOf',\n          params: [lpAddress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: lpAddress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAddress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: getAddress(farmConfig.token.address),\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: getAddress(farmConfig.quoteToken.address),\n          name: 'decimals',\n        },\n      ]\n\n      const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n        await multicall(erc20, calls)\n\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n      // Total value in staking in quote token value\n      const lpTotalInQuoteToken = new BigNumber(quoteTokenBalanceLP)\n        .div(DEFAULT_TOKEN_DECIMAL)\n        .times(new BigNumber(2))\n        .times(lpTokenRatio)\n\n      // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n      const tokenAmount = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals)).times(lpTokenRatio)\n      const quoteTokenAmount = new BigNumber(quoteTokenBalanceLP)\n        .div(BIG_TEN.pow(quoteTokenDecimals))\n        .times(lpTokenRatio)\n\n      const [info, totalAllocPoint] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        quoteTokenAmount: quoteTokenAmount.toJSON(),\n        lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: quoteTokenAmount.div(tokenAmount).toJSON(),\n        poolWeight: poolWeight.toJSON(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n"]},"metadata":{},"sourceType":"module"}