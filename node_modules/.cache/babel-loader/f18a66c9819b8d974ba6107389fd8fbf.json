{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { campaignMap } from 'config/constants/campaigns';\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints';\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements';\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async account => {\n  try {\n    const {\n      user\n    } = await request(GRAPH_API_PROFILE, gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `, {\n      account: account.toLowerCase()\n    });\n    return user.points;\n  } catch (error) {\n    return null;\n  }\n};\n/**\n * Gets all user point increase events and adds achievement meta\n */\n\nexport const getAchievements = async account => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account);\n\n  if (!pointIncreaseEvents) {\n    return [];\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    const campaignMeta = campaignMap.get(userPoint.campaignId);\n    return [...accum, {\n      id: userPoint.campaignId,\n      type: campaignMeta.type,\n      address: userPoint.id,\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(userPoint.points)\n    }];\n  }, []);\n};","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/state/achievements/helpers.ts"],"names":["request","gql","campaignMap","GRAPH_API_PROFILE","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","account","user","toLowerCase","points","error","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","campaignMeta","get","campaignId","id","type","address","title","description","badge","Number"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,SAASC,mBAAT,EAA8BC,yBAA9B,QAA+D,oBAA/D;;AAQA;AACA;AACA;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAOC,OAAP,IAA8D;AACtG,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,OAAO,CAC5BG,iBAD4B,EAE5BF,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAZkC,EAa5B;AACEM,MAAAA,OAAO,EAAEA,OAAO,CAACE,WAAR;AADX,KAb4B,CAA9B;AAkBA,WAAOD,IAAI,CAACE,MAAZ;AACD,GApBD,CAoBE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CAxBM;AA0BP;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAOL,OAAP,IAAmD;AAChF,QAAMM,mBAAmB,GAAG,MAAMP,0BAA0B,CAACC,OAAD,CAA5D;;AAEA,MAAI,CAACM,mBAAL,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,SAAOA,mBAAmB,CAACC,MAApB,CAA2B,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtD,UAAMC,YAAY,GAAGf,WAAW,CAACgB,GAAZ,CAAgBF,SAAS,CAACG,UAA1B,CAArB;AAEA,WAAO,CACL,GAAGJ,KADE,EAEL;AACEK,MAAAA,EAAE,EAAEJ,SAAS,CAACG,UADhB;AAEEE,MAAAA,IAAI,EAAEJ,YAAY,CAACI,IAFrB;AAGEC,MAAAA,OAAO,EAAEN,SAAS,CAACI,EAHrB;AAIEG,MAAAA,KAAK,EAAEnB,mBAAmB,CAACa,YAAD,CAJ5B;AAKEO,MAAAA,WAAW,EAAEnB,yBAAyB,CAACY,YAAD,CALxC;AAMEQ,MAAAA,KAAK,EAAER,YAAY,CAACQ,KANtB;AAOEf,MAAAA,MAAM,EAAEgB,MAAM,CAACV,SAAS,CAACN,MAAX;AAPhB,KAFK,CAAP;AAYD,GAfM,EAeJ,EAfI,CAAP;AAgBD,CAvBM","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      GRAPH_API_PROFILE,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    return [\n      ...accum,\n      {\n        id: userPoint.campaignId,\n        type: campaignMeta.type,\n        address: userPoint.id,\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(userPoint.points),\n      },\n    ]\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}