{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { usePriceCakeBusd } from 'state/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport easterPrizes from 'config/constants/trading-competition/easter';\nimport BigNumber from 'bignumber.js';\nexport const localiseTradingVolume = (value, decimals = 0) => {\n  return value.toLocaleString('en-US', {\n    maximumFractionDigits: decimals\n  });\n};\nexport const accountEllipsis = account => `${account.substring(0, 4)}...${account.substring(account.length - 4)}`;\nexport const useCompetitionCakeRewards = userCakeReward => {\n  _s();\n\n  const cakeAsBigNumber = new BigNumber(userCakeReward);\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber);\n  const cakePriceBusd = usePriceCakeBusd();\n  return {\n    cakeReward: cakeBalance,\n    dollarValueOfCakeReward: cakeBalance * cakePriceBusd.toNumber()\n  };\n}; // 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\n\n_s(useCompetitionCakeRewards, \"hGPUHk7pPJtm2wPjLczWbuCpA0k=\", false, function () {\n  return [usePriceCakeBusd];\n});\n\nexport const getRewardGroupAchievements = (userRewardGroup, teamRank = 1) => {\n  const userGroup = easterPrizes[teamRank].filter(prizeGroup => {\n    return prizeGroup.group === userRewardGroup;\n  })[0];\n  const userAchievements = userGroup && userGroup.achievements;\n  return userAchievements;\n};\nexport default localiseTradingVolume;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/TradingCompetition/helpers.ts"],"names":["usePriceCakeBusd","getBalanceNumber","easterPrizes","BigNumber","localiseTradingVolume","value","decimals","toLocaleString","maximumFractionDigits","accountEllipsis","account","substring","length","useCompetitionCakeRewards","userCakeReward","cakeAsBigNumber","cakeBalance","cakePriceBusd","cakeReward","dollarValueOfCakeReward","toNumber","getRewardGroupAchievements","userRewardGroup","teamRank","userGroup","filter","prizeGroup","group","userAchievements","achievements"],"mappings":";;AACA,SAASA,gBAAT,QAAiC,aAAjC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,KAAD,EAAgBC,QAAQ,GAAG,CAA3B,KAAiC;AACpE,SAAOD,KAAK,CAACE,cAAN,CAAqB,OAArB,EAA8B;AAAEC,IAAAA,qBAAqB,EAAEF;AAAzB,GAA9B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,eAAe,GAAIC,OAAD,IAC5B,GAAEA,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,CAAwB,MAAKD,OAAO,CAACC,SAAR,CAAkBD,OAAO,CAACE,MAAR,GAAiB,CAAnC,CAAsC,EADjE;AAGP,OAAO,MAAMC,yBAAyB,GAAIC,cAAD,IAA+B;AAAA;;AACtE,QAAMC,eAAe,GAAG,IAAIZ,SAAJ,CAAcW,cAAd,CAAxB;AACA,QAAME,WAAW,GAAGf,gBAAgB,CAACc,eAAD,CAApC;AACA,QAAME,aAAa,GAAGjB,gBAAgB,EAAtC;AACA,SAAO;AAAEkB,IAAAA,UAAU,EAAEF,WAAd;AAA2BG,IAAAA,uBAAuB,EAAEH,WAAW,GAAGC,aAAa,CAACG,QAAd;AAAlE,GAAP;AACD,CALM,C,CAOP;AACA;AACA;AACA;;GAVaP,yB;UAGWb,gB;;;AAQxB,OAAO,MAAMqB,0BAA0B,GAAG,CAACC,eAAD,EAA0BC,QAAQ,GAAG,CAArC,KAA2C;AACnF,QAAMC,SAAS,GAAGtB,YAAY,CAACqB,QAAD,CAAZ,CAAuBE,MAAvB,CAA+BC,UAAD,IAAgB;AAC9D,WAAOA,UAAU,CAACC,KAAX,KAAqBL,eAA5B;AACD,GAFiB,EAEf,CAFe,CAAlB;AAGA,QAAMM,gBAAgB,GAAGJ,SAAS,IAAIA,SAAS,CAACK,YAAhD;AACA,SAAOD,gBAAP;AACD,CANM;AAQP,eAAexB,qBAAf","sourcesContent":["import { ReactText } from 'react'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport easterPrizes from 'config/constants/trading-competition/easter'\nimport BigNumber from 'bignumber.js'\n\nexport const localiseTradingVolume = (value: number, decimals = 0) => {\n  return value.toLocaleString('en-US', { maximumFractionDigits: decimals })\n}\n\nexport const accountEllipsis = (account: string) =>\n  `${account.substring(0, 4)}...${account.substring(account.length - 4)}`\n\nexport const useCompetitionCakeRewards = (userCakeReward: ReactText) => {\n  const cakeAsBigNumber = new BigNumber(userCakeReward as string)\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber)\n  const cakePriceBusd = usePriceCakeBusd()\n  return { cakeReward: cakeBalance, dollarValueOfCakeReward: cakeBalance * cakePriceBusd.toNumber() }\n}\n\n// 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\nexport const getRewardGroupAchievements = (userRewardGroup: string, teamRank = 1) => {\n  const userGroup = easterPrizes[teamRank].filter((prizeGroup) => {\n    return prizeGroup.group === userRewardGroup\n  })[0]\n  const userAchievements = userGroup && userGroup.achievements\n  return userAchievements\n}\n\nexport default localiseTradingVolume\n"]},"metadata":{},"sourceType":"module"}