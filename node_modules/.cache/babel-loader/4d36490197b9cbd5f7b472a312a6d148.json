{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Heading, Flex, Image } from '@pancakeswap/uikit';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport { useTranslation } from 'contexts/Localization';\nimport usePersistState from 'hooks/usePersistState';\nimport { usePools, useBlock, useFetchCakeVault } from 'state/hooks';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport PageHeader from 'components/PageHeader';\nimport PoolCard from './components/PoolCard';\nimport CakeVaultCard from './components/CakeVaultCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport BountyCard from './components/BountyCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NUMBER_OF_POOLS_VISIBLE = 12;\n\nconst Pools = () => {\n  _s();\n\n  useFetchCakeVault();\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const pools = usePools(account);\n  const {\n    currentBlock\n  } = useBlock();\n  const [stakedOnly, setStakedOnly] = usePersistState(false, 'pancake_pool_staked');\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const loadMoreRef = useRef(null);\n  const [finishedPools, openPools] = useMemo(() => partition(pools, pool => pool.isFinished || currentBlock > pool.endBlock), [currentBlock, pools]);\n  const stakedOnlyFinishedPools = useMemo(() => finishedPools.filter(pool => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)), [finishedPools]);\n  const stakedOnlyOpenPools = useMemo(() => openPools.filter(pool => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)), [openPools]);\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0; // This pool is passed explicitly to the cake vault\n\n  const cakePoolData = useMemo(() => openPools.find(pool => pool.sousId === 0), [openPools]);\n  useEffect(() => {\n    const showMorePools = entries => {\n      const [entry] = entries;\n\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible(poolsCurrentlyVisible => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE);\n      }\n    };\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [observerIsSet]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        flexDirection: ['column', null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flexDirection: \"column\",\n          mr: ['8px', 0],\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            as: \"h1\",\n            scale: \"xxl\",\n            color: \"secondary\",\n            mb: \"24px\",\n            children: t('Syrup Pools')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            color: \"text\",\n            children: t('Simply stake tokens to earn.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            color: \"text\",\n            children: t('High APR, low risk.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          height: \"fit-content\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          mt: ['24px', null, '0'],\n          children: /*#__PURE__*/_jsxDEV(BountyCard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(PoolTabButtons, {\n        stakedOnly: stakedOnly,\n        setStakedOnly: setStakedOnly,\n        hasStakeInFinishedPools: hasStakeInFinishedPools\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(CakeVaultCard, {\n              pool: cakePoolData,\n              showStakedOnly: stakedOnly\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), stakedOnly ? orderBy(stakedOnlyOpenPools, ['sortOrder']).slice(0, numberOfPoolsVisible).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n              pool: pool,\n              account: account\n            }, pool.sousId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 36\n            }, this)) : orderBy(openPools, ['sortOrder']).slice(0, numberOfPoolsVisible).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n              pool: pool,\n              account: account\n            }, pool.sousId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 36\n            }, this))]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: `${path}/history`,\n          children: stakedOnly ? orderBy(stakedOnlyFinishedPools, ['sortOrder']).slice(0, numberOfPoolsVisible).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool,\n            account: account\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 34\n          }, this)) : orderBy(finishedPools, ['sortOrder']).slice(0, numberOfPoolsVisible).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool,\n            account: account\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 34\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        mx: \"auto\",\n        mt: \"12px\",\n        src: \"/images/3d-syrup-bunnies.png\",\n        alt: \"Pancake illustration\",\n        width: 192,\n        height: 184.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pools, \"s2szE2tqvBhgFwhluaeWkS0n4Z4=\", false, function () {\n  return [useFetchCakeVault, useRouteMatch, useTranslation, useWeb3React, usePools, useBlock, usePersistState];\n});\n\n_c = Pools;\nexport default Pools;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pools\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/index.tsx"],"names":["React","useEffect","useMemo","useRef","useState","Route","useRouteMatch","BigNumber","useWeb3React","Heading","Flex","Image","orderBy","partition","useTranslation","usePersistState","usePools","useBlock","useFetchCakeVault","FlexLayout","Page","PageHeader","PoolCard","CakeVaultCard","PoolTabButtons","BountyCard","NUMBER_OF_POOLS_VISIBLE","Pools","path","t","account","pools","currentBlock","stakedOnly","setStakedOnly","numberOfPoolsVisible","setNumberOfPoolsVisible","observerIsSet","setObserverIsSet","loadMoreRef","finishedPools","openPools","pool","isFinished","endBlock","stakedOnlyFinishedPools","filter","userData","stakedBalance","isGreaterThan","stakedOnlyOpenPools","hasStakeInFinishedPools","length","cakePoolData","find","sousId","showMorePools","entries","entry","isIntersecting","poolsCurrentlyVisible","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","current","slice","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport usePersistState from 'hooks/usePersistState'\nimport { usePools, useBlock, useFetchCakeVault } from 'state/hooks'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  useFetchCakeVault()\n  const { path } = useRouteMatch()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const pools = usePools(account)\n  const { currentBlock } = useBlock()\n  const [stakedOnly, setStakedOnly] = usePersistState(false, 'pancake_pool_staked')\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [finishedPools, openPools] = useMemo(\n    () => partition(pools, (pool) => pool.isFinished || currentBlock > pool.endBlock),\n    [currentBlock, pools],\n  )\n  const stakedOnlyFinishedPools = useMemo(\n    () => finishedPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [finishedPools],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () => openPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\n    [openPools],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  // This pool is passed explicitly to the cake vault\n  const cakePoolData = useMemo(() => openPools.find((pool) => pool.sousId === 0), [openPools])\n\n  useEffect(() => {\n    const showMorePools = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfPoolsVisible((poolsCurrentlyVisible) => poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMorePools, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [observerIsSet])\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, 'row']}>\n          <Flex flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Syrup Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Simply stake tokens to earn.')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n          <Flex height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n            <BountyCard />\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolTabButtons\n          stakedOnly={stakedOnly}\n          setStakedOnly={setStakedOnly}\n          hasStakeInFinishedPools={hasStakeInFinishedPools}\n        />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            <>\n              <CakeVaultCard pool={cakePoolData} showStakedOnly={stakedOnly} />\n              {stakedOnly\n                ? orderBy(stakedOnlyOpenPools, ['sortOrder'])\n                    .slice(0, numberOfPoolsVisible)\n                    .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)\n                : orderBy(openPools, ['sortOrder'])\n                    .slice(0, numberOfPoolsVisible)\n                    .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)}\n            </>\n          </Route>\n          <Route path={`${path}/history`}>\n            {stakedOnly\n              ? orderBy(stakedOnlyFinishedPools, ['sortOrder'])\n                  .slice(0, numberOfPoolsVisible)\n                  .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)\n              : orderBy(finishedPools, ['sortOrder'])\n                  .slice(0, numberOfPoolsVisible)\n                  .map((pool) => <PoolCard key={pool.sousId} pool={pool} account={account} />)}\n          </Route>\n        </FlexLayout>\n        <div ref={loadMoreRef} />\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        />\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"]},"metadata":{},"sourceType":"module"}