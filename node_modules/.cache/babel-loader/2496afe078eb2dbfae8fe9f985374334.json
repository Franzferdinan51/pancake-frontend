{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useTranslation } from 'contexts/Localization';\nimport { Flex, MetamaskIcon, Text, TooltipText, LinkExternal, TimerIcon, Skeleton, useTooltip, Button } from '@pancakeswap/uikit';\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config';\nimport { useBlock, useCakeVault } from 'state/hooks';\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers';\nimport { registerToken } from 'utils/wallet';\nimport Balance from 'components/Balance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`;\n_c = ExpandedWrapper;\n\nconst ExpandedFooter = ({\n  pool,\n  account,\n  isAutoVault = false\n}) => {\n  _s();\n\n  var _ethereum;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    currentBlock\n  } = useBlock();\n  const {\n    totalCakeInVault,\n    fees: {\n      performanceFee\n    }\n  } = useCakeVault();\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    startBlock,\n    endBlock,\n    isFinished,\n    contractAddress,\n    sousId\n  } = pool;\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : '';\n  const poolContractAddress = getAddress(contractAddress);\n  const cakeVaultContractAddress = getCakeVaultAddress();\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`;\n  const isMetaMaskInScope = !!((_ethereum = window.ethereum) === null || _ethereum === void 0 ? void 0 : _ethereum.isMetaMask);\n  const isManualCakePool = sousId === 0;\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0);\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(t('Subtracted automatically from each yield harvest and burned.'), {\n    placement: 'bottom-end'\n  });\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals);\n    }\n\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault);\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals);\n    }\n\n    return getBalanceNumber(totalStaked, stakingToken.decimals);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ExpandedWrapper, {\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        children: t('Total staked:')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"flex-start\",\n        children: totalStaked ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Balance, {\n            fontSize: \"14px\",\n            value: getTotalStakedBalance()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            ml: \"4px\",\n            fontSize: \"14px\",\n            children: stakingToken.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"90px\",\n          height: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), shouldShowBlockCountdown && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        children: [hasPoolStarted ? t('End') : t('Start'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [blocksRemaining || blocksUntilStart ? /*#__PURE__*/_jsxDEV(Balance, {\n          color: \"primary\",\n          fontSize: \"14px\",\n          value: hasPoolStarted ? blocksRemaining : blocksUntilStart,\n          decimals: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"54px\",\n          height: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          color: \"primary\",\n          small: true,\n          children: t('blocks')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TimerIcon, {\n          ml: \"4px\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), isAutoVault && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n        ref: targetRef,\n        small: true,\n        children: t('Performance Fee')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          small: true,\n          children: [performanceFee / 100, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(LinkExternal, {\n        bold: false,\n        small: true,\n        href: earningToken.projectLink,\n        children: t('View Project Site')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), poolContractAddress && /*#__PURE__*/_jsxDEV(Flex, {\n      mb: \"2px\",\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(LinkExternal, {\n        bold: false,\n        small: true,\n        href: `${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`,\n        children: t('View Contract')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), account && isMetaMaskInScope && tokenAddress && /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"text\",\n        p: \"0\",\n        height: \"auto\",\n        onClick: () => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc),\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"primary\",\n          fontSize: \"14px\",\n          children: \"Add to Metamask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MetamaskIcon, {\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpandedFooter, \"8r2ySPsr0VL+6FIlw4jiX2Cn9tc=\", false, function () {\n  return [useTranslation, useBlock, useCakeVault, useTooltip];\n});\n\n_c2 = ExpandedFooter;\nexport default _c3 = /*#__PURE__*/React.memo(ExpandedFooter);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ExpandedWrapper\");\n$RefreshReg$(_c2, \"ExpandedFooter\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/CardFooter/ExpandedFooter.tsx"],"names":["React","BigNumber","styled","getBalanceNumber","useTranslation","Flex","MetamaskIcon","Text","TooltipText","LinkExternal","TimerIcon","Skeleton","useTooltip","Button","BASE_BSC_SCAN_URL","BASE_URL","useBlock","useCakeVault","getAddress","getCakeVaultAddress","registerToken","Balance","ExpandedWrapper","ExpandedFooter","pool","account","isAutoVault","t","currentBlock","totalCakeInVault","fees","performanceFee","stakingToken","earningToken","totalStaked","startBlock","endBlock","isFinished","contractAddress","sousId","tokenAddress","address","poolContractAddress","cakeVaultContractAddress","imageSrc","symbol","toLowerCase","isMetaMaskInScope","window","ethereum","isMetaMask","isManualCakePool","shouldShowBlockCountdown","Boolean","blocksUntilStart","Math","max","blocksRemaining","hasPoolStarted","targetRef","tooltip","tooltipVisible","placement","getTotalStakedBalance","decimals","manualCakeTotalMinusAutoVault","minus","projectLink","memo"],"mappings":"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","sourcesContent":["import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  MetamaskIcon,\n  Text,\n  TooltipText,\n  LinkExternal,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n  Button,\n} from '@pancakeswap/uikit'\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { useBlock, useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { getAddress, getCakeVaultAddress } from 'utils/addressHelpers'\nimport { registerToken } from 'utils/wallet'\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  pool: Pool\n  account: string\n  isAutoVault?: boolean\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({ pool, account, isAutoVault = false }) => {\n  const { t } = useTranslation()\n  const { currentBlock } = useBlock()\n  const {\n    totalCakeInVault,\n    fees: { performanceFee },\n  } = useCakeVault()\n\n  const { stakingToken, earningToken, totalStaked, startBlock, endBlock, isFinished, contractAddress, sousId } = pool\n\n  const tokenAddress = earningToken.address ? getAddress(earningToken.address) : ''\n  const poolContractAddress = getAddress(contractAddress)\n  const cakeVaultContractAddress = getCakeVaultAddress()\n  const imageSrc = `${BASE_URL}/images/tokens/${earningToken.symbol.toLowerCase()}.png`\n  const isMetaMaskInScope = !!(window as WindowChain).ethereum?.isMetaMask\n  const isManualCakePool = sousId === 0\n\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-end' },\n  )\n\n  const getTotalStakedBalance = () => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked:')}</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance fontSize=\"14px\" value={getTotalStakedBalance()} />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n      <Flex mb=\"2px\" justifyContent=\"flex-end\">\n        <LinkExternal bold={false} small href={earningToken.projectLink}>\n          {t('View Project Site')}\n        </LinkExternal>\n      </Flex>\n      {poolContractAddress && (\n        <Flex mb=\"2px\" justifyContent=\"flex-end\">\n          <LinkExternal\n            bold={false}\n            small\n            href={`${BASE_BSC_SCAN_URL}/address/${isAutoVault ? cakeVaultContractAddress : poolContractAddress}`}\n          >\n            {t('View Contract')}\n          </LinkExternal>\n        </Flex>\n      )}\n      {account && isMetaMaskInScope && tokenAddress && (\n        <Flex justifyContent=\"flex-end\">\n          <Button\n            variant=\"text\"\n            p=\"0\"\n            height=\"auto\"\n            onClick={() => registerToken(tokenAddress, earningToken.symbol, earningToken.decimals, imageSrc)}\n          >\n            <Text color=\"primary\" fontSize=\"14px\">\n              Add to Metamask\n            </Text>\n            <MetamaskIcon ml=\"4px\" />\n          </Button>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n"]},"metadata":{},"sourceType":"module"}