{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/AprRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getPoolApr } from 'utils/apr';\nimport { getAddress } from 'utils/addressHelpers';\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers';\nimport { useGetApiPrice } from 'state/hooks';\nimport Balance from 'components/Balance';\nimport ApyCalculatorModal from 'components/ApyCalculatorModal';\nimport { BASE_EXCHANGE_URL } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AprRow = ({\n  pool,\n  stakingTokenPrice,\n  isAutoVault = false,\n  compoundFrequency = 1,\n  performanceFee = 0\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    stakingToken,\n    earningToken,\n    totalStaked,\n    isFinished,\n    tokenPerBlock\n  } = pool;\n  const tooltipContent = isAutoVault ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.') : t('This pool’s rewards aren’t compounded automatically, so we show APR');\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(tooltipContent, {\n    placement: 'bottom-end'\n  });\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : '');\n  const apr = getPoolApr(stakingTokenPrice, earningTokenPrice, getBalanceNumber(totalStaked, stakingToken.decimals), parseFloat(tokenPerBlock)); // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\n  const roundingDecimals = isHighValueToken ? 4 : 2;\n\n  const earningsPercentageToDisplay = () => {\n    if (isAutoVault) {\n      const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice;\n      const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n        numberOfDays: 365,\n        farmApr: apr,\n        tokenPrice: earningTokenPrice,\n        roundingDecimals,\n        compoundFrequency,\n        performanceFee\n      });\n      return getRoi({\n        amountEarned: tokenEarnedPerThousand365D,\n        amountInvested: oneThousandDollarsWorthOfToken\n      });\n    }\n\n    return apr;\n  };\n\n  const apyModalLink = stakingToken.address && `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`;\n  const [onPresentApyModal] = useModal( /*#__PURE__*/_jsxDEV(ApyCalculatorModal, {\n    tokenPrice: earningTokenPrice,\n    apr: apr,\n    linkLabel: `${t('Get')} ${stakingToken.symbol}`,\n    linkHref: apyModalLink || BASE_EXCHANGE_URL,\n    earningTokenSymbol: earningToken.symbol,\n    roundingDecimals: isHighValueToken ? 4 : 2,\n    compoundFrequency: compoundFrequency,\n    performanceFee: performanceFee\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n      ref: targetRef,\n      children: [isAutoVault ? t('APY') : t('APR'), \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), isFinished || !apr ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"82px\",\n      height: \"32px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"16px\",\n        isDisabled: isFinished,\n        value: earningsPercentageToDisplay(),\n        decimals: 2,\n        unit: \"%\",\n        bold: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: onPresentApyModal,\n        variant: \"text\",\n        scale: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n          color: \"textSubtle\",\n          width: \"18px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AprRow, \"dZaWuDqg83aWrVWXFImtAFCz5eg=\", false, function () {\n  return [useTranslation, useTooltip, useGetApiPrice, useModal];\n});\n\n_c = AprRow;\nexport default AprRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"AprRow\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/PoolCard/AprRow.tsx"],"names":["React","Flex","TooltipText","IconButton","useModal","CalculateIcon","Skeleton","useTooltip","useTranslation","getBalanceNumber","getPoolApr","getAddress","tokenEarnedPerThousandDollarsCompounding","getRoi","useGetApiPrice","Balance","ApyCalculatorModal","BASE_EXCHANGE_URL","AprRow","pool","stakingTokenPrice","isAutoVault","compoundFrequency","performanceFee","t","stakingToken","earningToken","totalStaked","isFinished","tokenPerBlock","tooltipContent","targetRef","tooltip","tooltipVisible","placement","earningTokenPrice","address","apr","decimals","parseFloat","isHighValueToken","Math","round","roundingDecimals","earningsPercentageToDisplay","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand365D","numberOfDays","farmApr","tokenPrice","amountEarned","amountInvested","apyModalLink","process","env","REACT_APP_CHAIN_ID","onPresentApyModal","symbol"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,QAAxC,EAAkDC,aAAlD,EAAiEC,QAAjE,EAA2EC,UAA3E,QAA6F,oBAA7F;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,wCAAT,EAAmDC,MAAnD,QAAiE,0BAAjE;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AAEA,SAASC,iBAAT,QAAkC,QAAlC;;;AAUA,MAAMC,MAA6B,GAAG,CAAC;AACrCC,EAAAA,IADqC;AAErCC,EAAAA,iBAFqC;AAGrCC,EAAAA,WAAW,GAAG,KAHuB;AAIrCC,EAAAA,iBAAiB,GAAG,CAJiB;AAKrCC,EAAAA,cAAc,GAAG;AALoB,CAAD,KAMhC;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQhB,cAAc,EAA5B;AACA,QAAM;AAAEiB,IAAAA,YAAF;AAAgBC,IAAAA,YAAhB;AAA8BC,IAAAA,WAA9B;AAA2CC,IAAAA,UAA3C;AAAuDC,IAAAA;AAAvD,MAAyEV,IAA/E;AAEA,QAAMW,cAAc,GAAGT,WAAW,GAC9BG,CAAC,CAAC,sGAAD,CAD6B,GAE9BA,CAAC,CAAC,qEAAD,CAFL;AAIA,QAAM;AAAEO,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,MAAyC1B,UAAU,CAACuB,cAAD,EAAiB;AAAEI,IAAAA,SAAS,EAAE;AAAb,GAAjB,CAAzD;AAEA,QAAMC,iBAAiB,GAAGrB,cAAc,CAACY,YAAY,CAACU,OAAb,GAAuBzB,UAAU,CAACe,YAAY,CAACU,OAAd,CAAjC,GAA0D,EAA3D,CAAxC;AACA,QAAMC,GAAG,GAAG3B,UAAU,CACpBU,iBADoB,EAEpBe,iBAFoB,EAGpB1B,gBAAgB,CAACkB,WAAD,EAAcF,YAAY,CAACa,QAA3B,CAHI,EAIpBC,UAAU,CAACV,aAAD,CAJU,CAAtB,CAXI,CAkBJ;;AACA,QAAMW,gBAAgB,GAAGC,IAAI,CAACC,KAAL,CAAWP,iBAAiB,GAAG,IAA/B,IAAuC,CAAhE;AACA,QAAMQ,gBAAgB,GAAGH,gBAAgB,GAAG,CAAH,GAAO,CAAhD;;AAEA,QAAMI,2BAA2B,GAAG,MAAM;AACxC,QAAIvB,WAAJ,EAAiB;AACf,YAAMwB,8BAA8B,GAAG,OAAOV,iBAA9C;AACA,YAAMW,0BAA0B,GAAGlC,wCAAwC,CAAC;AAC1EmC,QAAAA,YAAY,EAAE,GAD4D;AAE1EC,QAAAA,OAAO,EAAEX,GAFiE;AAG1EY,QAAAA,UAAU,EAAEd,iBAH8D;AAI1EQ,QAAAA,gBAJ0E;AAK1ErB,QAAAA,iBAL0E;AAM1EC,QAAAA;AAN0E,OAAD,CAA3E;AAQA,aAAOV,MAAM,CAAC;AACZqC,QAAAA,YAAY,EAAEJ,0BADF;AAEZK,QAAAA,cAAc,EAAEN;AAFJ,OAAD,CAAb;AAID;;AACD,WAAOR,GAAP;AACD,GAjBD;;AAmBA,QAAMe,YAAY,GAChB3B,YAAY,CAACW,OAAb,IACC,GAAEnB,iBAAkB,0BAAyBQ,YAAY,CAACW,OAAb,CAAqBiB,OAAO,CAACC,GAAR,CAAYC,kBAAjC,CAAqD,EAFrG;AAIA,QAAM,CAACC,iBAAD,IAAsBpD,QAAQ,eAClC,QAAC,kBAAD;AACE,IAAA,UAAU,EAAE+B,iBADd;AAEE,IAAA,GAAG,EAAEE,GAFP;AAGE,IAAA,SAAS,EAAG,GAAEb,CAAC,CAAC,KAAD,CAAQ,IAAGC,YAAY,CAACgC,MAAO,EAHhD;AAIE,IAAA,QAAQ,EAAEL,YAAY,IAAInC,iBAJ5B;AAKE,IAAA,kBAAkB,EAAES,YAAY,CAAC+B,MALnC;AAME,IAAA,gBAAgB,EAAEjB,gBAAgB,GAAG,CAAH,GAAO,CAN3C;AAOE,IAAA,iBAAiB,EAAElB,iBAPrB;AAQE,IAAA,cAAc,EAAEC;AARlB;AAAA;AAAA;AAAA;AAAA,UADkC,CAApC;AAaA,sBACE,QAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,cAAc,EAAC,eAAzC;AAAA,eACGU,cAAc,IAAID,OADrB,eAEE,QAAC,WAAD;AAAa,MAAA,GAAG,EAAED,SAAlB;AAAA,iBAA8BV,WAAW,GAAGG,CAAC,CAAC,KAAD,CAAJ,GAAcA,CAAC,CAAC,KAAD,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGI,UAAU,IAAI,CAACS,GAAf,gBACC,QAAC,QAAD;AAAU,MAAA,KAAK,EAAC,MAAhB;AAAuB,MAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC,QAAC,IAAD;AAAM,MAAA,UAAU,EAAC,QAAjB;AAAA,8BACE,QAAC,OAAD;AACE,QAAA,QAAQ,EAAC,MADX;AAEE,QAAA,UAAU,EAAET,UAFd;AAGE,QAAA,KAAK,EAAEgB,2BAA2B,EAHpC;AAIE,QAAA,QAAQ,EAAE,CAJZ;AAKE,QAAA,IAAI,EAAC,GALP;AAME,QAAA,IAAI;AANN;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEY,iBAArB;AAAwC,QAAA,OAAO,EAAC,MAAhD;AAAuD,QAAA,KAAK,EAAC,IAA7D;AAAA,+BACE,QAAC,aAAD;AAAe,UAAA,KAAK,EAAC,YAArB;AAAkC,UAAA,KAAK,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAvFD;;GAAMtC,M;UAOUV,c,EAOiCD,U,EAErBO,c,EAmCEV,Q;;;KAnDxBc,M;AAyFN,eAAeA,MAAf","sourcesContent":["import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getPoolApr } from 'utils/apr'\nimport { getAddress } from 'utils/addressHelpers'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\nimport { useGetApiPrice } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { Pool } from 'state/types'\nimport { BASE_EXCHANGE_URL } from 'config'\n\ninterface AprRowProps {\n  pool: Pool\n  stakingTokenPrice: number\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({\n  pool,\n  stakingTokenPrice,\n  isAutoVault = false,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-end' })\n\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? getAddress(earningToken.address) : '')\n  const apr = getPoolApr(\n    stakingTokenPrice,\n    earningTokenPrice,\n    getBalanceNumber(totalStaked, stakingToken.decimals),\n    parseFloat(tokenPerBlock),\n  )\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  const earningsPercentageToDisplay = () => {\n    if (isAutoVault) {\n      const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n      const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n        numberOfDays: 365,\n        farmApr: apr,\n        tokenPrice: earningTokenPrice,\n        roundingDecimals,\n        compoundFrequency,\n        performanceFee,\n      })\n      return getRoi({\n        amountEarned: tokenEarnedPerThousand365D,\n        amountInvested: oneThousandDollarsWorthOfToken,\n      })\n    }\n    return apr\n  }\n\n  const apyModalLink =\n    stakingToken.address &&\n    `${BASE_EXCHANGE_URL}/#/swap?outputCurrency=${stakingToken.address[process.env.REACT_APP_CHAIN_ID]}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      tokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={`${t('Get')} ${stakingToken.symbol}`}\n      linkHref={apyModalLink || BASE_EXCHANGE_URL}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={isHighValueToken ? 4 : 2}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? t('APY') : t('APR')}:</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay()}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n"]},"metadata":{},"sourceType":"module"}