{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer';\nimport { useCakeVault } from 'state/hooks';\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UnstakingFeeCountdownRow = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    userData: {\n      lastDepositedTime\n    },\n    fees: {\n      withdrawalFee,\n      withdrawalFeePeriod\n    }\n  } = useCakeVault();\n  const feeAsDecimal = withdrawalFee / 100 || '-';\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      bold: true,\n      mb: \"4px\",\n      children: t(`Unstaking fee: %fee%%`, {\n        fee: feeAsDecimal\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'bottom-start'\n  });\n  const {\n    secondsRemaining,\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), withdrawalFeePeriod); // The user has made a deposit, but has no fee\n\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee; // Show the timer if a user is connected, has deposited, and has an unstaking fee\n\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee;\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('unstaking fee');\n    }\n\n    if (shouldShowTimer) {\n      return t('unstaking fee until');\n    }\n\n    return t('unstaking fee if withdrawn within 72h');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n      ref: targetRef,\n      small: true,\n      children: [noFeeToPay ? '0' : feeAsDecimal, \"% \", getRowText()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), shouldShowTimer && /*#__PURE__*/_jsxDEV(WithdrawalFeeTimer, {\n      secondsRemaining: secondsRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UnstakingFeeCountdownRow, \"ilV5ocU1QDL3wuRTFy6ILcr0Nik=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault, useTooltip, useWithdrawalFeeTimer];\n});\n\n_c = UnstakingFeeCountdownRow;\nexport default UnstakingFeeCountdownRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnstakingFeeCountdownRow\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx"],"names":["React","Flex","Text","TooltipText","useTooltip","useTranslation","useWeb3React","useWithdrawalFeeTimer","useCakeVault","WithdrawalFeeTimer","UnstakingFeeCountdownRow","t","account","userData","lastDepositedTime","fees","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","targetRef","tooltip","tooltipVisible","fee","placement","secondsRemaining","hasUnstakingFee","parseInt","noFeeToPay","shouldShowTimer","getRowText"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,WAArB,EAAkCC,UAAlC,QAAoD,oBAApD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;;;AAEA,MAAMC,wBAAwB,GAAG,MAAM;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAQN,cAAc,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,YAAY,EAAhC;AACA,QAAM;AACJO,IAAAA,QAAQ,EAAE;AAAEC,MAAAA;AAAF,KADN;AAEJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB;AAFF,MAGFT,YAAY,EAHhB;AAIA,QAAMU,YAAY,GAAGF,aAAa,GAAG,GAAhB,IAAuB,GAA5C;AACA,QAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,MAAyCjB,UAAU,eACvD;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAC,KAAd;AAAA,gBACGO,CAAC,CAAE,uBAAF,EAA0B;AAAEW,QAAAA,GAAG,EAAEJ;AAAP,OAA1B;AADJ;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,IAAD;AAAA,gBACGP,CAAC,CACA,+IADA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADuD,EAWvD;AAAEY,IAAAA,SAAS,EAAE;AAAb,GAXuD,CAAzD;AAcA,QAAM;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA;AAApB,MAAwClB,qBAAqB,CACjEmB,QAAQ,CAACZ,iBAAD,EAAoB,EAApB,CADyD,EAEjEG,mBAFiE,CAAnE,CAtBqC,CA2BrC;;AACA,QAAMU,UAAU,GAAGb,iBAAiB,IAAI,CAACW,eAAzC,CA5BqC,CA8BrC;;AACA,QAAMG,eAAe,GAAGhB,OAAO,IAAIE,iBAAX,IAAgCW,eAAxD;;AAEA,QAAMI,UAAU,GAAG,MAAM;AACvB,QAAIF,UAAJ,EAAgB;AACd,aAAOhB,CAAC,CAAC,eAAD,CAAR;AACD;;AACD,QAAIiB,eAAJ,EAAqB;AACnB,aAAOjB,CAAC,CAAC,qBAAD,CAAR;AACD;;AACD,WAAOA,CAAC,CAAC,uCAAD,CAAR;AACD,GARD;;AAUA,sBACE,QAAC,IAAD;AAAM,IAAA,UAAU,EAAC,QAAjB;AAA0B,IAAA,cAAc,EAAC,eAAzC;AAAA,eACGU,cAAc,IAAID,OADrB,eAEE,QAAC,WAAD;AAAa,MAAA,GAAG,EAAED,SAAlB;AAA6B,MAAA,KAAK,MAAlC;AAAA,iBACGQ,UAAU,GAAG,GAAH,GAAST,YADtB,QACsCW,UAAU,EADhD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAKGD,eAAe,iBAAI,QAAC,kBAAD;AAAoB,MAAA,gBAAgB,EAAEJ;AAAtC;AAAA;AAAA;AAAA;AAAA,YALtB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CApDD;;GAAMd,wB;UACUL,c,EACMC,Y,EAIhBE,Y,EAE2CJ,U,EAcDG,qB;;;KAtB1CG,wB;AAsDN,eAAeA,wBAAf","sourcesContent":["import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\nconst UnstakingFeeCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t(`Unstaking fee: %fee%%`, { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('unstaking fee')\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n"]},"metadata":{},"sourceType":"module"}