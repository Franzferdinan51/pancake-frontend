{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport { useAppDispatch } from 'state';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Image, Heading, Toggle, Text } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport usePersistState from 'hooks/usePersistState';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getFarmApr } from 'utils/apr';\nimport { orderBy } from 'lodash';\nimport { getAddress } from 'utils/addressHelpers';\nimport isArchivedPid from 'utils/farmHelpers';\nimport { latinise } from 'utils/latinise';\nimport PageHeader from 'components/PageHeader';\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms';\nimport Select from 'components/Select/Select';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport Table from './components/FarmTable/FarmTable';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport SearchInput from './components/SearchInput';\nimport ToggleView from './components/ToggleView/ToggleView';\nimport { DesktopColumnSchema, ViewMode } from './components/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c = ControlContainer;\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c2 = ToggleWrapper;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c3 = LabelWrapper;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c4 = FilterContainer;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c5 = ViewControls;\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`;\n_c6 = StyledImage;\nconst NUMBER_OF_FARMS_VISIBLE = 12;\n\nconst Farms = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP,\n    userDataLoaded\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const [query, setQuery] = useState('');\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view');\n  const {\n    account\n  } = useWeb3React();\n  const [sortOption, setSortOption] = useState('hot');\n  const prices = useGetApiPrices();\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const isArchived = pathname.includes('archived');\n  const isInactive = pathname.includes('history');\n  const isActive = !isInactive && !isArchived; // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const userDataReady = !account || !!account && userDataLoaded;\n  const [stakedOnly, setStakedOnly] = useState(!isActive);\n  useEffect(() => {\n    setStakedOnly(!isActive);\n  }, [isActive]);\n  useEffect(() => {\n    // Makes the main scheduled fetching to request archived farms data\n    dispatch(setLoadArchivedFarmsData(isArchived)); // Immediately request data for archived farms so users don't have to wait\n    // 60 seconds for public data and 10 seconds for user data\n\n    if (isArchived) {\n      dispatch(fetchFarmsPublicDataAsync());\n\n      if (account) {\n        dispatch(fetchFarmUserDataAsync(account));\n      }\n    }\n  }, [isArchived, dispatch, account]);\n  const activeFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid));\n  const inactiveFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid));\n  const archivedFarms = farmsLP.filter(farm => isArchivedPid(farm.pid));\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedInactiveFarms = inactiveFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedArchivedFarms = archivedFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const farmsList = useCallback(farmsToDisplay => {\n    let farmsToDisplayWithAPR = farmsToDisplay.map(farm => {\n      if (!farm.lpTotalInQuoteToken || !prices) {\n        return farm;\n      }\n\n      const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()];\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd);\n      const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0;\n      return { ...farm,\n        apr,\n        liquidity: totalLiquidity\n      };\n    });\n\n    if (query) {\n      const lowercaseQuery = latinise(query.toLowerCase());\n      farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter(farm => {\n        return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery);\n      });\n    }\n\n    return farmsToDisplayWithAPR;\n  }, [cakePrice, prices, query, isActive]);\n\n  const handleChangeQuery = event => {\n    setQuery(event.target.value);\n  };\n\n  const loadMoreRef = useRef(null);\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = [];\n\n    const sortFarms = farms => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, farm => farm.apr, 'desc');\n\n        case 'multiplier':\n          return orderBy(farms, farm => farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0, 'desc');\n\n        case 'earned':\n          return orderBy(farms, farm => farm.userData ? Number(farm.userData.earnings) : 0, 'desc');\n\n        case 'liquidity':\n          return orderBy(farms, farm => Number(farm.liquidity), 'desc');\n\n        default:\n          return farms;\n      }\n    };\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms);\n    }\n\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms);\n    }\n\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms);\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible);\n  }, [sortOption, activeFarms, farmsList, inactiveFarms, archivedFarms, isActive, isInactive, isArchived, stakedArchivedFarms, stakedInactiveFarms, stakedOnly, stakedOnlyFarms, numberOfFarmsVisible]);\n  useEffect(() => {\n    const showMoreFarms = entries => {\n      const [entry] = entries;\n\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible(farmsCurrentlyVisible => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE);\n      }\n    };\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [farmsStakedMemoized, observerIsSet]);\n  const rowData = farmsStakedMemoized.map(farm => {\n    const {\n      token,\n      quoteToken\n    } = farm;\n    const tokenAddress = token.address;\n    const quoteTokenAddress = quoteToken.address;\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '');\n    const row = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', {\n          maximumFractionDigits: 2\n        }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid\n      },\n      liquidity: {\n        liquidity: farm.liquidity\n      },\n      multiplier: {\n        multiplier: farm.multiplier\n      },\n      details: farm\n    };\n    return row;\n  });\n\n  const renderContent = () => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema;\n      const columns = columnSchema.map(column => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a, b) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id;\n\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value);\n              }\n\n              return 0;\n\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings;\n\n            default:\n              return 1;\n          }\n        },\n        sortable: column.sortable\n      }));\n      return /*#__PURE__*/_jsxDEV(Table, {\n        data: rowData,\n        columns: columns,\n        userDataReady: userDataReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: farmsStakedMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n            farm: farm,\n            cakePrice: cakePrice,\n            account: account,\n            removed: false\n          }, farm.pid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/history`,\n          children: farmsStakedMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n            farm: farm,\n            cakePrice: cakePrice,\n            account: account,\n            removed: true\n          }, farm.pid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/archived`,\n          children: farmsStakedMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n            farm: farm,\n            cakePrice: cakePrice,\n            account: account,\n            removed: true\n          }, farm.pid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h1\",\n        scale: \"xxl\",\n        color: \"secondary\",\n        mb: \"24px\",\n        children: t('Farms')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"lg\",\n        color: \"text\",\n        children: t('Stake Liquidity Pool (LP) tokens to earn.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(ControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ViewControls, {\n          children: [/*#__PURE__*/_jsxDEV(ToggleView, {\n            viewMode: viewMode,\n            onToggle: mode => setViewMode(mode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Toggle, {\n              checked: stakedOnly,\n              onChange: () => setStakedOnly(!stakedOnly),\n              scale: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [\" \", t('Staked only')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n            hasStakeInFinishedFarms: stakedInactiveFarms.length > 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \"SORT BY\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              options: [{\n                label: 'Hot',\n                value: 'hot'\n              }, {\n                label: 'APR',\n                value: 'apr'\n              }, {\n                label: 'Multiplier',\n                value: 'multiplier'\n              }, {\n                label: 'Earned',\n                value: 'earned'\n              }, {\n                label: 'Liquidity',\n                value: 'liquidity'\n              }],\n              onChange: handleSortOptionChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: \"SEARCH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeQuery\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), renderContent(), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledImage, {\n        src: \"/images/3dpan.png\",\n        alt: \"Pancake illustration\",\n        width: 120,\n        height: 103\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Farms, \"FZioy3GuvW51n0FxX9ixXueCjVU=\", false, function () {\n  return [useRouteMatch, useLocation, useTranslation, useFarms, usePriceCakeBusd, usePersistState, useWeb3React, useGetApiPrices, useAppDispatch, useRefresh];\n});\n\n_c7 = Farms;\nexport default Farms;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ControlContainer\");\n$RefreshReg$(_c2, \"ToggleWrapper\");\n$RefreshReg$(_c3, \"LabelWrapper\");\n$RefreshReg$(_c4, \"FilterContainer\");\n$RefreshReg$(_c5, \"ViewControls\");\n$RefreshReg$(_c6, \"StyledImage\");\n$RefreshReg$(_c7, \"Farms\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","useMemo","useRef","Route","useRouteMatch","useLocation","useAppDispatch","BigNumber","useWeb3React","Image","Heading","Toggle","Text","styled","FlexLayout","Page","useFarms","usePriceCakeBusd","useGetApiPrices","useRefresh","fetchFarmUserDataAsync","usePersistState","useTranslation","getBalanceNumber","getFarmApr","orderBy","getAddress","isArchivedPid","latinise","PageHeader","fetchFarmsPublicDataAsync","setLoadArchivedFarmsData","Select","FarmCard","Table","FarmTabButtons","SearchInput","ToggleView","DesktopColumnSchema","ViewMode","ControlContainer","div","theme","mediaQueries","sm","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","NUMBER_OF_FARMS_VISIBLE","Farms","path","pathname","t","data","farmsLP","userDataLoaded","cakePrice","query","setQuery","viewMode","setViewMode","TABLE","account","sortOption","setSortOption","prices","dispatch","fastRefresh","isArchived","includes","isInactive","isActive","userDataReady","stakedOnly","setStakedOnly","activeFarms","filter","farm","pid","multiplier","inactiveFarms","archivedFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","quoteTokenPriceUsd","quoteToken","address","toLowerCase","totalLiquidity","times","apr","poolWeight","liquidity","lowercaseQuery","lpSymbol","handleChangeQuery","event","target","value","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","sortFarms","farms","Number","slice","earnings","showMoreFarms","entries","entry","isIntersecting","farmsCurrentlyVisible","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","current","rowData","token","tokenAddress","quoteTokenAddress","lpLabel","split","toUpperCase","replace","row","toLocaleString","maximumFractionDigits","originalValue","image","toLocaleLowerCase","label","earned","details","renderContent","length","columnSchema","columns","column","id","name","sort","a","b","original","sortable","handleSortOptionChange","option","mode","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport { getAddress } from 'utils/addressHelpers'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport PageHeader from 'components/PageHeader'\nimport { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'pancake_farm_view')\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useState(!isActive)\n  useEffect(() => {\n    setStakedOnly(!isActive)\n  }, [isActive])\n\n  useEffect(() => {\n    // Makes the main scheduled fetching to request archived farms data\n    dispatch(setLoadArchivedFarmsData(isArchived))\n\n    // Immediately request data for archived farms so users don't have to wait\n    // 60 seconds for public data and 10 seconds for user data\n    if (isArchived) {\n      dispatch(fetchFarmsPublicDataAsync())\n      if (account) {\n        dispatch(fetchFarmUserDataAsync(account))\n      }\n    }\n  }, [isArchived, dispatch, account])\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const farmsStakedMemoized = useMemo(() => {\n    let farmsStaked = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      farmsStaked = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [farmsStakedMemoized, observerIsSet])\n\n  const rowData = farmsStakedMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n          <Route exact path={`${path}/archived`}>\n            {farmsStakedMemoized.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}