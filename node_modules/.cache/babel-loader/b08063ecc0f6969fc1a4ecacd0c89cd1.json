{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { PoolIds } from 'config/constants/types';\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract';\nimport { useIfoAllowance } from 'hooks/useAllowance';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { getAddress } from 'utils/addressHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = ifo => {\n  _s();\n\n  const [state, setState] = useState({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO // Not used\n\n    }\n  });\n  const {\n    address,\n    currency\n  } = ifo;\n  const {\n    poolUnlimited\n  } = state;\n  const {\n    account\n  } = useWeb3React();\n  const contract = useIfoV1Contract(address);\n  const currencyContract = useERC20(getAddress(currency.address));\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx);\n\n  const setPendingTx = status => setState(prevState => ({\n    [PoolIds.poolUnlimited]: { ...prevState.poolUnlimited,\n      isPendingTx: status\n    }\n  }));\n\n  const setIsClaimed = () => {\n    setState(prevState => ({\n      [PoolIds.poolUnlimited]: { ...prevState.poolUnlimited,\n        hasClaimed: true\n      }\n    }));\n  };\n\n  const fetchIfoData = useCallback(async () => {\n    const [offeringAmount, userInfoResponse, refundingAmount] = await makeBatchRequest([contract.methods.getOfferingAmount(account).call, contract.methods.userInfo(account).call, contract.methods.getRefundingAmount(account).call]);\n    setState(prevState => ({\n      [PoolIds.poolUnlimited]: { ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfoResponse.amount),\n        hasClaimed: userInfoResponse.claimed,\n        offeringAmountInToken: new BigNumber(offeringAmount),\n        refundingAmountInLP: new BigNumber(refundingAmount)\n      }\n    }));\n  }, [account, contract]);\n  useEffect(() => {\n    if (account) {\n      fetchIfoData();\n    }\n  }, [account, fetchIfoData]);\n  return { ...state,\n    allowance,\n    contract,\n    setPendingTx,\n    setIsClaimed,\n    fetchIfoData\n  };\n};\n\n_s(useGetWalletIfoData, \"f1fQoxBTSGgPEvEVI3UTQmcfbyg=\", false, function () {\n  return [useWeb3React, useIfoV1Contract, useERC20, useIfoAllowance];\n});\n\nexport default useGetWalletIfoData;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/hooks/ifo/v1/useGetWalletIfoData.ts"],"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","PoolIds","useERC20","useIfoV1Contract","useIfoAllowance","makeBatchRequest","getAddress","BIG_ZERO","useGetWalletIfoData","ifo","state","setState","poolUnlimited","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","prevState","setIsClaimed","fetchIfoData","offeringAmount","userInfoResponse","refundingAmount","methods","getOfferingAmount","call","userInfo","getRefundingAmount","amount","claimed"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { useIfoAllowance } from 'hooks/useAllowance'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { WalletIfoState, WalletIfoData } from '../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO, // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(getAddress(currency.address))\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const [offeringAmount, userInfoResponse, refundingAmount] = (await makeBatchRequest([\n      contract.methods.getOfferingAmount(account).call,\n      contract.methods.userInfo(account).call,\n      contract.methods.getRefundingAmount(account).call,\n    ])) as [string, UserInfo, string]\n\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfoResponse.amount),\n        hasClaimed: userInfoResponse.claimed,\n        offeringAmountInToken: new BigNumber(offeringAmount),\n        refundingAmountInLP: new BigNumber(refundingAmount),\n      },\n    }))\n  }, [account, contract])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}