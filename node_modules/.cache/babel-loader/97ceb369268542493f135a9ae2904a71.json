{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Profile/ProfileCreation/ProfilePicture.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport { getAddressByType } from 'utils/collectibles';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport { useTranslation } from 'contexts/Localization';\nimport { useGetCollectibles } from 'state/hooks';\nimport useToast from 'hooks/useToast';\nimport { useERC721 } from 'hooks/useContract';\nimport SelectionCard from '../components/SelectionCard';\nimport NextStepButton from '../components/NextStepButton';\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Link = styled(RouterLink)`\n  color: ${({\n  theme\n}) => theme.colors.primary};\n`;\n_c = Link;\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`;\n_c2 = NftWrapper;\n\nconst ProfilePicture = () => {\n  _s();\n\n  const [isApproved, setIsApproved] = useState(false);\n  const [isApproving, setIsApproving] = useState(false);\n  const {\n    selectedNft,\n    actions\n  } = useContext(ProfileCreationContext);\n  const {\n    t\n  } = useTranslation();\n  const {\n    isLoading,\n    nftsInWallet,\n    tokenIds\n  } = useGetCollectibles();\n  const contract = useERC721(selectedNft.nftAddress);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n\n  const handleApprove = () => {\n    contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({\n      from: account\n    }).once('sending', () => {\n      setIsApproving(true);\n    }).once('receipt', () => {\n      setIsApproving(false);\n      setIsApproved(true);\n    }).once('error', error => {\n      toastError('Error', error === null || error === void 0 ? void 0 : error.message);\n      setIsApproving(false);\n    });\n  };\n\n  if (!isLoading && nftsInWallet.length === 0) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        mb: \"24px\",\n        children: t('Oops!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        fontSize: \"20px\",\n        mb: \"24px\",\n        children: t('We couldn’t find any Pancake Collectibles in your wallet.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        children: t('You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: t(`Step ${2}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      scale: \"xl\",\n      mb: \"24px\",\n      children: t('Set Profile Picture')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Choose collectible')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          children: t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"24px\",\n          children: [t('Only approved Pancake Collectibles can be used.'), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/collectibles\",\n            style: {\n              marginLeft: '4px'\n            },\n            children: t('See the list >')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NftWrapper, {\n          children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n            height: \"80px\",\n            mb: \"16px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this) : nftsInWallet.map(walletNft => {\n            const [firstTokenId] = tokenIds[walletNft.identifier];\n            const address = getAddressByType(walletNft.type);\n            return /*#__PURE__*/_jsxDEV(SelectionCard, {\n              name: \"profilePicture\",\n              value: firstTokenId,\n              image: `/images/nfts/${walletNft.images.md}`,\n              isChecked: firstTokenId === selectedNft.tokenId,\n              onChange: value => actions.setSelectedNft(parseInt(value, 10), address),\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                bold: true,\n                children: walletNft.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 21\n              }, this)\n            }, walletNft.identifier, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Allow collectible to be locked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"16px\",\n          children: t(\"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          isLoading: isApproving,\n          disabled: isApproved || isApproving || selectedNft.tokenId === null,\n          onClick: handleApprove,\n          endIcon: isApproving ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n            spin: true,\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 36\n          }, this) : undefined,\n          children: t('Approve')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextStepButton, {\n      onClick: actions.nextStep,\n      disabled: selectedNft.tokenId === null || !isApproved || isApproving,\n      children: t('Next Step')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfilePicture, \"op58oa4LfWOc8VfPmpuj3g49s84=\", false, function () {\n  return [useTranslation, useGetCollectibles, useERC721, useWeb3React, useToast];\n});\n\n_c3 = ProfilePicture;\nexport default ProfilePicture;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Link\");\n$RefreshReg$(_c2, \"NftWrapper\");\n$RefreshReg$(_c3, \"ProfilePicture\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Profile/ProfileCreation/ProfilePicture.tsx"],"names":["React","useContext","useState","styled","AutoRenewIcon","Button","Card","CardBody","Heading","Skeleton","Text","Link","RouterLink","useWeb3React","getAddressByType","getPancakeProfileAddress","useTranslation","useGetCollectibles","useToast","useERC721","SelectionCard","NextStepButton","ProfileCreationContext","theme","colors","primary","NftWrapper","div","ProfilePicture","isApproved","setIsApproved","isApproving","setIsApproving","selectedNft","actions","t","isLoading","nftsInWallet","tokenIds","contract","nftAddress","account","toastError","handleApprove","methods","approve","tokenId","send","from","once","error","message","length","marginLeft","map","walletNft","firstTokenId","identifier","address","type","images","md","value","setSelectedNft","parseInt","name","undefined","nextStep"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAddressByType } from 'utils/collectibles'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCollectibles } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n  const { t } = useTranslation()\n  const { isLoading, nftsInWallet, tokenIds } = useGetCollectibles()\n  const contract = useERC721(selectedNft.nftAddress)\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n\n  const handleApprove = () => {\n    contract.methods\n      .approve(getPancakeProfileAddress(), selectedNft.tokenId)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsApproving(true)\n      })\n      .once('receipt', () => {\n        setIsApproving(false)\n        setIsApproved(true)\n      })\n      .once('error', (error) => {\n        toastError('Error', error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!isLoading && nftsInWallet.length === 0) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t(`Step ${2}`)}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to=\"/collectibles\" style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {isLoading ? (\n              <Skeleton height=\"80px\" mb=\"16px\" />\n            ) : (\n              nftsInWallet.map((walletNft) => {\n                const [firstTokenId] = tokenIds[walletNft.identifier]\n                const address = getAddressByType(walletNft.type)\n\n                return (\n                  <SelectionCard\n                    name=\"profilePicture\"\n                    key={walletNft.identifier}\n                    value={firstTokenId}\n                    image={`/images/nfts/${walletNft.images.md}`}\n                    isChecked={firstTokenId === selectedNft.tokenId}\n                    onChange={(value: string) => actions.setSelectedNft(parseInt(value, 10), address)}\n                  >\n                    <Text bold>{walletNft.name}</Text>\n                  </SelectionCard>\n                )\n              })\n            )}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n          >\n            {t('Approve')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n"]},"metadata":{},"sourceType":"module"}