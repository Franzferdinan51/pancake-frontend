{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { BSC_BLOCK_TIME } from 'config';\nimport { PoolIds } from 'config/constants/types';\nimport { useBlock, useLpTokenPrice } from 'state/hooks';\nimport { useIfoV1Contract } from 'hooks/useContract';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getStatus } from '../helpers';\n/**\n * Gets all public data of an IFO\n */\n\nconst useGetPublicIfoData = ifo => {\n  _s();\n\n  const {\n    address,\n    releaseBlockNumber\n  } = ifo;\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol);\n  const [state, setState] = useState({\n    status: 'idle',\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      // Not know\n      limitPerUserInLP: BIG_ZERO,\n      //  Not used\n      taxRate: 0,\n      //  Not used\n      sumTaxesOverflow: BIG_ZERO //  Not used\n\n    }\n  });\n  const {\n    currentBlock\n  } = useBlock();\n  const contract = useIfoV1Contract(address);\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await makeBatchRequest([contract.methods.startBlock().call, contract.methods.endBlock().call, contract.methods.raisingAmount().call, contract.methods.totalAmount().call]);\n    const startBlockNum = parseInt(startBlock, 10);\n    const endBlockNum = parseInt(endBlock, 10);\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n    const totalBlocks = endBlockNum - startBlockNum;\n    const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n    const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n    setState(prev => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: { ...prev.poolUnlimited,\n        raisingAmountPool: new BigNumber(raisingAmount),\n        totalAmountPool: new BigNumber(totalAmount)\n      }\n    }));\n  }, [contract, currentBlock, releaseBlockNumber]);\n  useEffect(() => {\n    fetchIfoData();\n  }, [fetchIfoData]);\n  return { ...state,\n    currencyPriceInUSD: lpTokenPriceInUsd,\n    fetchIfoData\n  };\n};\n\n_s(useGetPublicIfoData, \"osfQQ+iv4hLTmS2YHr4HTL2L4Bs=\", false, function () {\n  return [useLpTokenPrice, useBlock, useIfoV1Contract];\n});\n\nexport default useGetPublicIfoData;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/hooks/ifo/v1/useGetPublicIfoData.ts"],"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","useIfoV1Contract","makeBatchRequest","BIG_ZERO","getStatus","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","state","setState","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","currentBlock","contract","fetchIfoData","startBlock","endBlock","raisingAmount","totalAmount","methods","call","parseInt","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock, useLpTokenPrice } from 'state/hooks'\nimport { useIfoV1Contract } from 'hooks/useContract'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData } from '../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const contract = useIfoV1Contract(address)\n\n  const fetchIfoData = useCallback(async () => {\n    const [startBlock, endBlock, raisingAmount, totalAmount] = (await makeBatchRequest([\n      contract.methods.startBlock().call,\n      contract.methods.endBlock().call,\n      contract.methods.raisingAmount().call,\n      contract.methods.totalAmount().call,\n    ])) as [string, string, string, string]\n\n    const startBlockNum = parseInt(startBlock, 10)\n    const endBlockNum = parseInt(endBlock, 10)\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: {\n        ...prev.poolUnlimited,\n        raisingAmountPool: new BigNumber(raisingAmount),\n        totalAmountPool: new BigNumber(totalAmount),\n      },\n    }))\n  }, [contract, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}