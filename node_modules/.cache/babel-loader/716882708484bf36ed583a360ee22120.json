{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance';\nexport const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber));\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals);\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals);\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound);\n  return {\n    cakeAsNumberBalance,\n    cakeAsBigNumber,\n    cakeAsDisplayBalance\n  };\n};\nexport const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber));\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals);\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound);\n  return {\n    sharesAsNumberBalance,\n    sharesAsBigNumber,\n    sharesAsDisplayBalance\n  };\n};","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Pools/helpers.tsx"],"names":["BigNumber","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,EAAkDC,gBAAlD,QAA0E,qBAA1E;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,MADiC,EAEjCC,gBAFiC,EAGjCC,QAAQ,GAAG,EAHsB,EAIjCC,eAAe,GAAG,CAJe,KAK9B;AACH,QAAMC,gBAAgB,GAAGR,gBAAgB,CAACK,gBAAD,EAAmBC,QAAnB,CAAzC;AACA,QAAMG,YAAY,GAAG,IAAIV,SAAJ,CAAcK,MAAM,CAACM,YAAP,CAAoBF,gBAApB,CAAd,CAArB;AACA,QAAMG,mBAAmB,GAAGX,gBAAgB,CAACS,YAAD,EAAeH,QAAf,CAA5C;AACA,QAAMM,eAAe,GAAGV,gBAAgB,CAAC,IAAIH,SAAJ,CAAcY,mBAAd,CAAD,EAAqCL,QAArC,CAAxC;AACA,QAAMO,oBAAoB,GAAGZ,qBAAqB,CAACQ,YAAD,EAAeH,QAAf,EAAyBC,eAAzB,CAAlD;AACA,SAAO;AAAEI,IAAAA,mBAAF;AAAuBC,IAAAA,eAAvB;AAAwCC,IAAAA;AAAxC,GAAP;AACD,CAZM;AAcP,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,IADiC,EAEjCV,gBAFiC,EAGjCC,QAAQ,GAAG,EAHsB,EAIjCC,eAAe,GAAG,CAJe,KAK9B;AACH,QAAMC,gBAAgB,GAAGR,gBAAgB,CAACK,gBAAD,EAAmBC,QAAnB,CAAzC;AACA,QAAMU,cAAc,GAAG,IAAIjB,SAAJ,CAAcgB,IAAI,CAACE,SAAL,CAAeT,gBAAf,CAAd,CAAvB;AACA,QAAMU,qBAAqB,GAAGlB,gBAAgB,CAACgB,cAAD,EAAiBV,QAAjB,CAA9C;AACA,QAAMa,iBAAiB,GAAGjB,gBAAgB,CAAC,IAAIH,SAAJ,CAAcmB,qBAAd,CAAD,EAAuCZ,QAAvC,CAA1C;AACA,QAAMc,sBAAsB,GAAGnB,qBAAqB,CAACe,cAAD,EAAiBV,QAAjB,EAA2BC,eAA3B,CAApD;AACA,SAAO;AAAEW,IAAAA,qBAAF;AAAyBC,IAAAA,iBAAzB;AAA4CC,IAAAA;AAA5C,GAAP;AACD,CAZM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n"]},"metadata":{},"sourceType":"module"}