{"ast":null,"code":"var _jsxFileName = \"/home/duckets/Documents/pancake-frontend-1/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit';\nimport { PoolIds } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClaimButton = ({\n  poolId,\n  walletIfoData\n}) => {\n  _s();\n\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n\n  const setPendingTx = isPending => walletIfoData.setPendingTx(isPending, poolId);\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true);\n      await walletIfoData.contract.methods.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1).send({\n        from: account\n      });\n      walletIfoData.setIsClaimed(poolId);\n      toastSuccess('Success!', 'You have successfully claimed your rewards.');\n    } catch (error) {\n      toastError('Error', error === null || error === void 0 ? void 0 : error.message);\n      console.error(error);\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClaim,\n    disabled: userPoolCharacteristics.isPendingTx,\n    width: \"100%\",\n    isLoading: userPoolCharacteristics.isPendingTx,\n    endIcon: userPoolCharacteristics.isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n      spin: true,\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 54\n    }, this) : null,\n    children: t('Claim')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimButton, \"bgEqdivix+PG0h2RXVSq7F5KXIs=\", false, function () {\n  return [useTranslation, useWeb3React, useToast];\n});\n\n_c = ClaimButton;\nexport default ClaimButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimButton\");","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx"],"names":["React","useWeb3React","AutoRenewIcon","Button","PoolIds","useTranslation","useToast","ClaimButton","poolId","walletIfoData","userPoolCharacteristics","t","account","toastError","toastSuccess","setPendingTx","isPending","handleClaim","contract","methods","harvestPool","poolBasic","send","from","setIsClaimed","error","message","console","isPendingTx"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,oBAAtC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAOA,MAAMC,WAA4B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAA+B;AAAA;;AAClE,QAAMC,uBAAuB,GAAGD,aAAa,CAACD,MAAD,CAA7C;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAQN,cAAc,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAM;AAAEY,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BR,QAAQ,EAA7C;;AAEA,QAAMS,YAAY,GAAIC,SAAD,IAAwBP,aAAa,CAACM,YAAd,CAA2BC,SAA3B,EAAsCR,MAAtC,CAA7C;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC9B,QAAI;AACFF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMN,aAAa,CAACS,QAAd,CAAuBC,OAAvB,CAA+BC,WAA/B,CAA2CZ,MAAM,KAAKJ,OAAO,CAACiB,SAAnB,GAA+B,CAA/B,GAAmC,CAA9E,EAAiFC,IAAjF,CAAsF;AAAEC,QAAAA,IAAI,EAAEX;AAAR,OAAtF,CAAN;AACAH,MAAAA,aAAa,CAACe,YAAd,CAA2BhB,MAA3B;AACAM,MAAAA,YAAY,CAAC,UAAD,EAAa,6CAAb,CAAZ;AACD,KALD,CAKE,OAAOW,KAAP,EAAc;AACdZ,MAAAA,UAAU,CAAC,OAAD,EAAUY,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAEC,OAAjB,CAAV;AACAC,MAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD,KARD,SAQU;AACRV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAZD;;AAcA,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAEE,WADX;AAEE,IAAA,QAAQ,EAAEP,uBAAuB,CAACkB,WAFpC;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,SAAS,EAAElB,uBAAuB,CAACkB,WAJrC;AAKE,IAAA,OAAO,EAAElB,uBAAuB,CAACkB,WAAxB,gBAAsC,QAAC,aAAD;AAAe,MAAA,IAAI,MAAnB;AAAoB,MAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAtC,GAAoF,IAL/F;AAAA,cAOGjB,CAAC,CAAC,OAAD;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjCD;;GAAMJ,W;UAEUF,c,EACMJ,Y,EACiBK,Q;;;KAJjCC,W;AAmCN,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'hooks/ifo/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\n\ninterface Props {\n  poolId: PoolIds\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      setPendingTx(true)\n      await walletIfoData.contract.methods.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1).send({ from: account })\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess('Success!', 'You have successfully claimed your rewards.')\n    } catch (error) {\n      toastError('Error', error?.message)\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {t('Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n"]},"metadata":{},"sourceType":"module"}