{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { convertSharesToCake } from 'views/Pools/helpers';\nimport { getCakeVaultContract } from 'utils/contractHelpers';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nconst cakeVaultContract = getCakeVaultContract();\nexport const fetchPublicVaultData = async () => {\n  try {\n    const [sharePrice, shares, estimatedCakeBountyReward, totalPendingCakeHarvest] = await makeBatchRequest([cakeVaultContract.methods.getPricePerFullShare().call, cakeVaultContract.methods.totalShares().call, cakeVaultContract.methods.calculateHarvestCakeRewards().call, cakeVaultContract.methods.calculateTotalPendingCakeRewards().call]);\n    const totalSharesAsBigNumber = new BigNumber(shares);\n    const sharePriceAsBigNumber = new BigNumber(sharePrice);\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber);\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest).toJSON()\n    };\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null\n    };\n  }\n};\nexport const fetchVaultFees = async () => {\n  try {\n    const [performanceFee, callFee, withdrawalFee, withdrawalFeePeriod] = await makeBatchRequest([cakeVaultContract.methods.performanceFee().call, cakeVaultContract.methods.callFee().call, cakeVaultContract.methods.withdrawFee().call, cakeVaultContract.methods.withdrawFeePeriod().call]);\n    return {\n      performanceFee: parseInt(performanceFee, 10),\n      callFee: parseInt(callFee, 10),\n      withdrawalFee: parseInt(withdrawalFee, 10),\n      withdrawalFeePeriod: parseInt(withdrawalFeePeriod, 10)\n    };\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null\n    };\n  }\n};\nexport default fetchPublicVaultData;","map":{"version":3,"sources":["/home/duckets/Documents/pancake-frontend-1/src/state/pools/fetchVaultPublic.ts"],"names":["BigNumber","convertSharesToCake","getCakeVaultContract","makeBatchRequest","cakeVaultContract","fetchPublicVaultData","sharePrice","shares","estimatedCakeBountyReward","totalPendingCakeHarvest","methods","getPricePerFullShare","call","totalShares","calculateHarvestCakeRewards","calculateTotalPendingCakeRewards","totalSharesAsBigNumber","sharePriceAsBigNumber","totalCakeInVaultEstimate","toJSON","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","error","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","withdrawFee","withdrawFeePeriod","parseInt"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AAEA,MAAMC,iBAAiB,GAAGF,oBAAoB,EAA9C;AAEA,OAAO,MAAMG,oBAAoB,GAAG,YAAY;AAC9C,MAAI;AACF,UAAM,CAACC,UAAD,EAAaC,MAAb,EAAqBC,yBAArB,EAAgDC,uBAAhD,IAA2E,MAAMN,gBAAgB,CAAC,CACtGC,iBAAiB,CAACM,OAAlB,CAA0BC,oBAA1B,GAAiDC,IADqD,EAEtGR,iBAAiB,CAACM,OAAlB,CAA0BG,WAA1B,GAAwCD,IAF8D,EAGtGR,iBAAiB,CAACM,OAAlB,CAA0BI,2BAA1B,GAAwDF,IAH8C,EAItGR,iBAAiB,CAACM,OAAlB,CAA0BK,gCAA1B,GAA6DH,IAJyC,CAAD,CAAvG;AAMA,UAAMI,sBAAsB,GAAG,IAAIhB,SAAJ,CAAcO,MAAd,CAA/B;AACA,UAAMU,qBAAqB,GAAG,IAAIjB,SAAJ,CAAcM,UAAd,CAA9B;AACA,UAAMY,wBAAwB,GAAGjB,mBAAmB,CAACe,sBAAD,EAAyBC,qBAAzB,CAApD;AACA,WAAO;AACLJ,MAAAA,WAAW,EAAEG,sBAAsB,CAACG,MAAvB,EADR;AAELC,MAAAA,iBAAiB,EAAEH,qBAAqB,CAACE,MAAtB,EAFd;AAGLE,MAAAA,gBAAgB,EAAEH,wBAAwB,CAACI,eAAzB,CAAyCH,MAAzC,EAHb;AAILX,MAAAA,yBAAyB,EAAE,IAAIR,SAAJ,CAAcQ,yBAAd,EAAmDW,MAAnD,EAJtB;AAKLV,MAAAA,uBAAuB,EAAE,IAAIT,SAAJ,CAAcS,uBAAd,EAAiDU,MAAjD;AALpB,KAAP;AAOD,GAjBD,CAiBE,OAAOI,KAAP,EAAc;AACd,WAAO;AACLV,MAAAA,WAAW,EAAE,IADR;AAELO,MAAAA,iBAAiB,EAAE,IAFd;AAGLC,MAAAA,gBAAgB,EAAE,IAHb;AAILb,MAAAA,yBAAyB,EAAE,IAJtB;AAKLC,MAAAA,uBAAuB,EAAE;AALpB,KAAP;AAOD;AACF,CA3BM;AA6BP,OAAO,MAAMe,cAAc,GAAG,YAAY;AACxC,MAAI;AACF,UAAM,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,aAA1B,EAAyCC,mBAAzC,IAAgE,MAAMzB,gBAAgB,CAAC,CAC3FC,iBAAiB,CAACM,OAAlB,CAA0Be,cAA1B,GAA2Cb,IADgD,EAE3FR,iBAAiB,CAACM,OAAlB,CAA0BgB,OAA1B,GAAoCd,IAFuD,EAG3FR,iBAAiB,CAACM,OAAlB,CAA0BmB,WAA1B,GAAwCjB,IAHmD,EAI3FR,iBAAiB,CAACM,OAAlB,CAA0BoB,iBAA1B,GAA8ClB,IAJ6C,CAAD,CAA5F;AAMA,WAAO;AACLa,MAAAA,cAAc,EAAEM,QAAQ,CAACN,cAAD,EAA2B,EAA3B,CADnB;AAELC,MAAAA,OAAO,EAAEK,QAAQ,CAACL,OAAD,EAAoB,EAApB,CAFZ;AAGLC,MAAAA,aAAa,EAAEI,QAAQ,CAACJ,aAAD,EAA0B,EAA1B,CAHlB;AAILC,MAAAA,mBAAmB,EAAEG,QAAQ,CAACH,mBAAD,EAAgC,EAAhC;AAJxB,KAAP;AAMD,GAbD,CAaE,OAAOL,KAAP,EAAc;AACd,WAAO;AACLE,MAAAA,cAAc,EAAE,IADX;AAELC,MAAAA,OAAO,EAAE,IAFJ;AAGLC,MAAAA,aAAa,EAAE,IAHV;AAILC,MAAAA,mBAAmB,EAAE;AAJhB,KAAP;AAMD;AACF,CAtBM;AAwBP,eAAevB,oBAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { getCakeVaultContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst cakeVaultContract = getCakeVaultContract()\n\nexport const fetchPublicVaultData = async () => {\n  try {\n    const [sharePrice, shares, estimatedCakeBountyReward, totalPendingCakeHarvest] = await makeBatchRequest([\n      cakeVaultContract.methods.getPricePerFullShare().call,\n      cakeVaultContract.methods.totalShares().call,\n      cakeVaultContract.methods.calculateHarvestCakeRewards().call,\n      cakeVaultContract.methods.calculateTotalPendingCakeRewards().call,\n    ])\n    const totalSharesAsBigNumber = new BigNumber(shares as string)\n    const sharePriceAsBigNumber = new BigNumber(sharePrice as string)\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward as string).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest as string).toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null,\n    }\n  }\n}\n\nexport const fetchVaultFees = async () => {\n  try {\n    const [performanceFee, callFee, withdrawalFee, withdrawalFeePeriod] = await makeBatchRequest([\n      cakeVaultContract.methods.performanceFee().call,\n      cakeVaultContract.methods.callFee().call,\n      cakeVaultContract.methods.withdrawFee().call,\n      cakeVaultContract.methods.withdrawFeePeriod().call,\n    ])\n    return {\n      performanceFee: parseInt(performanceFee as string, 10),\n      callFee: parseInt(callFee as string, 10),\n      withdrawalFee: parseInt(withdrawalFee as string, 10),\n      withdrawalFeePeriod: parseInt(withdrawalFeePeriod as string, 10),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicVaultData\n"]},"metadata":{},"sourceType":"module"}